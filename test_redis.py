#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Brainzzz.
"""

import asyncio

from web.event_bus import event_bus
from web.redis_manager import redis_manager


async def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis."""
    print("üî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        connected = await redis_manager.connect()
        if connected:
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await redis_manager.get_system_stats()
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis:")
            print(f"   –í–µ—Ä—Å–∏—è: {stats.get('redis_version', 'N/A')}")
            print(f"   –ö–ª–∏–µ–Ω—Ç—ã: {stats.get('connected_clients', 'N/A')}")
            print(f"   –ü–∞–º—è—Ç—å: {stats.get('used_memory_human', 'N/A')}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è
            success = await redis_manager.publish_event(
                "test", {"message": "Hello Redis!"}
            )
            if success:
                print("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redis")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è")

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_event_bus():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Event Bus."""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Event Bus...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Event Bus
        await event_bus.start()
        print("‚úÖ Event Bus –∑–∞–ø—É—â–µ–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è
        await event_bus.publish_population_tick(
            generation=1, population_size=20, best_fitness=0.8, mean_fitness=0.6
        )
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Event Bus
        await event_bus.stop()
        print("‚úÖ Event Bus –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Event Bus: {e}")


async def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é."""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        await redis_manager.connect()

        # –ó–∞–ø—É—Å–∫–∞–µ–º Event Bus
        await event_bus.start()

        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
        await event_bus.publish_brain_snapshot(1, {"nodes": 10, "fitness": 0.7})
        await event_bus.publish_growth_event(1, "add_node", {"cost": 5.0})
        await event_bus.publish_help_score(1, 0.3, "cooperation", 2)

        print("‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await event_bus.stop()
        await redis_manager.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Brainzzz\n")

    # –¢–µ—Å—Ç 1: Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await test_redis_connection()

    # –¢–µ—Å—Ç 2: Event Bus
    await test_event_bus()

    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    await test_integration()

    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
