#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤.
"""

import numpy as np
import time
import logging
from typing import List, Dict, Any
from brains import Brain, Genome, GrowthRules
from tasks import TaskManager, XORTask, SequenceTask
from evo import EvolutionEngine
from viz import BrainVisualizer
from dist import ParallelEngine


def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('brain_incubator.log'),
            logging.StreamHandler()
        ]
    )


def create_initial_population(population_size: int = 10) -> List[Brain]:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –º–æ–∑–≥–æ–≤.
    
    Args:
        population_size: –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ –º–æ–∑–≥–æ–≤
    """
    brains = []
    growth_rules = GrowthRules()
    
    for i in range(population_size):
        # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–æ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        input_size = np.random.randint(2, 5)
        output_size = np.random.randint(1, 3)
        hidden_size = np.random.randint(2, 6)
        
        genome = Genome(input_size, output_size, hidden_size)
        brain = Brain(genome, growth_rules)
        
        # –î–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–µ GP –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
        brain.gp = np.random.uniform(5.0, 15.0)
        
        brains.append(brain)
        logging.info(f"–°–æ–∑–¥–∞–Ω –º–æ–∑–≥ {i+1}: {brain}")
    
    return brains


def run_evolution_cycle(brains: List[Brain], 
                        task_manager: TaskManager,
                        evolution_engine: EvolutionEngine,
                        num_generations: int = 100) -> List[Brain]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏.
    
    Args:
        brains: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è
        task_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
        evolution_engine: –î–≤–∏–∂–æ–∫ —ç–≤–æ–ª—é—Ü–∏–∏
        num_generations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        
    Returns:
        –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è
    """
    current_population = brains.copy()
    
    for generation in range(num_generations):
        logging.info(f"\n=== –ü–æ–∫–æ–ª–µ–Ω–∏–µ {generation + 1}/{num_generations} ===")
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å
        fitness_scores = []
        for brain in current_population:
            # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á–∏
            task_results = task_manager.evaluate_brain(brain)
            fitness = brain.evaluate_fitness(task_results)
            fitness_scores.append(fitness)
            
            logging.info(f"–ú–æ–∑–≥ {brain}: fitness={fitness:.3f}, GP={brain.gp:.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏
        avg_fitness = np.mean(fitness_scores)
        max_fitness = np.max(fitness_scores)
        avg_nodes = np.mean([b.phenotype.num_nodes for b in current_population])
        
        logging.info(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {avg_fitness:.3f}")
        logging.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {max_fitness:.3f}")
        logging.info(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: {avg_nodes:.1f}")
        
        # –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
        current_population = evolution_engine.evolve_population(current_population)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if max_fitness > 0.95:
            logging.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é.")
            break
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏
        time.sleep(0.1)
    
    return current_population


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üß† –ó–∞–ø—É—Å–∫ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
        task_manager = TaskManager()
        task_manager.add_task(XORTask())
        task_manager.add_task(SequenceTask())
        
        # –î–≤–∏–∂–æ–∫ —ç–≤–æ–ª—é—Ü–∏–∏
        evolution_engine = EvolutionEngine(
            population_size=10,
            mutation_rate=0.1,
            crossover_rate=0.7,
            elite_size=2
        )
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        visualizer = BrainVisualizer()
        
        # –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏...")
        initial_population = create_initial_population(population_size=10)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é
        logger.info("–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        final_population = run_evolution_cycle(
            brains=initial_population,
            task_manager=task_manager,
            evolution_engine=evolution_engine,
            num_generations=50
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        best_brain = max(final_population, key=lambda b: b.fitness)
        
        logger.info(f"\nüèÜ –õ—É—á—à–∏–π –º–æ–∑–≥:")
        logger.info(f"   –ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {best_brain.fitness:.3f}")
        logger.info(f"   –£–∑–ª—ã: {best_brain.phenotype.num_nodes}")
        logger.info(f"   GP: {best_brain.gp:.2f}")
        logger.info(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {best_brain.phenotype.get_network_density():.3f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –º—ã—Å–ª–∏ –ª—É—á—à–µ–≥–æ –º–æ–∑–≥–∞
        thought_path = best_brain.get_thought_path()
        logger.info(f"   –ü—É—Ç—å –º—ã—Å–ª–∏: {thought_path[:10]}...")  # –ü–µ—Ä–≤—ã–µ 10 —à–∞–≥–æ–≤
        
        # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–π –º–æ–∑–≥
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        visualizer.visualize_brain(best_brain, save_path="best_brain.png")
        
        print(f"\n‚úÖ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –õ—É—á—à–∏–π –º–æ–∑–≥ –∏–º–µ–µ—Ç –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å {best_brain.fitness:.3f}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main() 