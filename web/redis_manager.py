"""
Redis –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ Brainzzz.
"""

import json
import logging
from datetime import datetime
from typing import Any, Callable, Dict, Optional

import redis.asyncio as redis

from .settings import settings

logger = logging.getLogger(__name__)


class RedisManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Redis –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏."""

    def __init__(self):
        self.redis_client: Optional[redis.Redis] = None
        self.pubsub: Optional[redis.client.PubSub] = None
        self.is_connected = False
        self.event_handlers: Dict[str, Callable] = {}

    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Redis."""
        try:
            self.redis_client = redis.Redis(
                host=settings.redis_host,
                port=settings.redis_port,
                db=settings.redis_db,
                password=settings.redis_password,
                decode_responses=True,
                socket_keepalive=True,
                socket_keepalive_options={},
                retry_on_timeout=True,
                health_check_interval=30,
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self.redis_client.ping()
            self.is_connected = True

            # –°–æ–∑–¥–∞–µ–º pubsub
            self.pubsub = self.redis_client.pubsub()

            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            self.is_connected = False
            return False

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Redis."""
        try:
            if self.pubsub:
                await self.pubsub.close()
            if self.redis_client:
                await self.redis_client.close()
            self.is_connected = False
            logger.info("üîå Redis –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Redis: {e}")

    async def publish_event(self, event_type: str, data: Dict[str, Any]) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Redis."""
        if not self.is_connected:
            logger.warning("Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False

        try:
            event = {
                "type": event_type,
                "schema": "1.0",
                "ts": datetime.now().isoformat(),
                "data": data,
            }

            channel = f"brainzzz.events.{event_type}"
            await self.redis_client.publish(channel, json.dumps(event))

            logger.debug(f"üì° –°–æ–±—ã—Ç–∏–µ {event_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
            return False

    async def subscribe_to_events(self, event_types: list[str], handler: Callable):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è."""
        if not self.is_connected or not self.pubsub:
            logger.warning("Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return False

        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            channels = [f"brainzzz.events.{event_type}" for event_type in event_types]
            await self.pubsub.subscribe(*channels)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            for event_type in event_types:
                self.event_handlers[event_type] = handler

            logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: {event_types}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
            return False

    async def listen_for_events(self):
        """–°–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ Redis."""
        if not self.is_connected or not self.pubsub:
            return

        try:
            async for message in self.pubsub.listen():
                if message["type"] == "message":
                    try:
                        event_data = json.loads(message["data"])
                        event_type = event_data.get("type")

                        if event_type in self.event_handlers:
                            handler = self.event_handlers[event_type]
                            await handler(event_data)
                        else:
                            logger.debug(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")

                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")

    async def publish_population_update(self, population_data: Dict[str, Any]):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏."""
        return await self.publish_event("population_update", population_data)

    async def publish_brain_evolution(
        self, brain_id: int, evolution_data: Dict[str, Any]
    ):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —ç–≤–æ–ª—é—Ü–∏—é –º–æ–∑–≥–∞."""
        data = {"brain_id": brain_id, **evolution_data}
        return await self.publish_event("brain_evolution", data)

    async def publish_task_completion(self, task_name: str, results: Dict[str, Any]):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        data = {"task_name": task_name, **results}
        return await self.publish_event("task_completion", data)

    async def publish_system_status(self, status_data: Dict[str, Any]):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        return await self.publish_event("system_status", status_data)

    async def get_system_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
        if not self.is_connected:
            return {}

        try:
            stats = await self.redis_client.info()
            return {
                "redis_version": stats.get("redis_version"),
                "connected_clients": stats.get("connected_clients"),
                "used_memory_human": stats.get("used_memory_human"),
                "total_commands_processed": stats.get("total_commands_processed"),
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis –º–µ–Ω–µ–¥–∂–µ—Ä–∞
redis_manager = RedisManager()
