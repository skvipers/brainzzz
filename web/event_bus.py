"""
Event Bus –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ray —Å Redis.
"""

import json
import asyncio
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from .redis_manager import redis_manager

logger = logging.getLogger(__name__)


class EventBus:
    """Event Bus –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ray —Å Redis."""

    def __init__(self):
        self.is_running = False
        self.event_queue: asyncio.Queue = asyncio.Queue()
        self.event_handlers: Dict[str, List[callable]] = {}

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Event Bus."""
        if self.is_running:
            return

        self.is_running = True
        logger.info("üöÄ Event Bus –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        asyncio.create_task(self._event_processor())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Event Bus."""
        self.is_running = False
        logger.info("üõë Event Bus –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def publish_event(self, event_type: str, data: Dict[str, Any]):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Event Bus."""
        event = {
            "type": event_type,
            "schema": "1.0",
            "ts": datetime.now().isoformat(),
            "data": data,
        }

        await self.event_queue.put(event)
        logger.debug(f"üì° –°–æ–±—ã—Ç–∏–µ {event_type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

    def subscribe(self, event_type: str, handler: callable):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è."""
        if event_type not in self.event_handlers:
            self.event_handlers[event_type] = []

        self.event_handlers[event_type].append(handler)
        logger.debug(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {event_type}: {handler.__name__}")

    def unsubscribe(self, event_type: str, handler: callable):
        """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π."""
        if event_type in self.event_handlers:
            try:
                self.event_handlers[event_type].remove(handler)
                logger.debug(f"üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {event_type}: {handler.__name__}")
            except ValueError:
                pass

    async def _event_processor(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        while self.is_running:
            try:
                # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                event = await asyncio.wait_for(self.event_queue.get(), timeout=1.0)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                await self._process_event(event)

                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.event_queue.task_done()

            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    async def _process_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ."""
        event_type = event.get("type")
        event_data = event.get("data", {})

        logger.debug(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: {event_type}")

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if event_type in self.event_handlers:
            for handler in self.event_handlers[event_type]:
                try:
                    if asyncio.iscoroutinefunction(handler):
                        await handler(event_data)
                    else:
                        handler(event_data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {handler.__name__}: {e}")

        # –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
        if redis_manager.is_connected:
            await redis_manager.publish_event(event_type, event_data)

    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π Brainzzz

    async def publish_population_tick(
        self,
        generation: int,
        population_size: int,
        best_fitness: float,
        mean_fitness: float,
    ):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Ç–∏–∫ –ø–æ–ø—É–ª—è—Ü–∏–∏."""
        data = {
            "generation": generation,
            "population_size": population_size,
            "best_fitness": best_fitness,
            "mean_fitness": mean_fitness,
            "timestamp": datetime.now().isoformat(),
        }
        await self.publish_event("pop_tick", data)

    async def publish_brain_snapshot(self, brain_id: int, brain_data: Dict[str, Any]):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–Ω–∞–ø—à–æ—Ç –º–æ–∑–≥–∞."""
        data = {
            "brain_id": brain_id,
            "snapshot": brain_data,
            "timestamp": datetime.now().isoformat(),
        }
        await self.publish_event("brain_snapshot", data)

    async def publish_trace_chunk(
        self, generation: int, trace_data: List[Dict[str, Any]]
    ):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —á–∞–Ω–∫ —Ç—Ä–µ–π—Å–∞."""
        data = {
            "generation": generation,
            "traces": trace_data,
            "timestamp": datetime.now().isoformat(),
        }
        await self.publish_event("trace_chunk", data)

    async def publish_help_score(
        self,
        brain_id: int,
        help_score: float,
        help_type: str,
        target_id: Optional[int] = None,
    ):
        """–ü—É–±–ª–∏–∫—É–µ—Ç help score."""
        data = {
            "brain_id": brain_id,
            "help_score": help_score,
            "help_type": help_type,
            "target_id": target_id,
            "timestamp": datetime.now().isoformat(),
        }
        await self.publish_event("help_score", data)

    async def publish_growth_event(
        self, brain_id: int, growth_type: str, growth_data: Dict[str, Any]
    ):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–æ—Å—Ç–∞."""
        data = {
            "brain_id": brain_id,
            "growth_type": growth_type,
            "growth_data": growth_data,
            "timestamp": datetime.now().isoformat(),
        }
        await self.publish_event("growth", data)

    async def publish_lineage_update(
        self,
        brain_id: int,
        parent_id: Optional[int],
        mutation_type: str,
        fitness_delta: float,
    ):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–æ—Å–ª–æ–≤–Ω–æ–π."""
        data = {
            "brain_id": brain_id,
            "parent_id": parent_id,
            "mutation_type": mutation_type,
            "fitness_delta": fitness_delta,
            "timestamp": datetime.now().isoformat(),
        }
        await self.publish_event("lineage", data)

    async def publish_error(
        self, error_type: str, error_message: str, context: Dict[str, Any] = None
    ):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –æ—à–∏–±–∫—É."""
        data = {
            "error_type": error_type,
            "error_message": error_message,
            "context": context or {},
            "timestamp": datetime.now().isoformat(),
        }
        await self.publish_event("error", data)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Event Bus
event_bus = EventBus()
