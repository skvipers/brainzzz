from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import json
import asyncio
from typing import List
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üß† –ò–Ω–∫—É–±–∞—Ç–æ—Ä –ú–æ–∑–≥–æ–≤ (–¢–µ—Å—Ç)",
    description="–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
    version="1.0.0"
)

# CORS middleware –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
from pydantic import BaseModel

class PopulationStats(BaseModel):
    size: int
    avg_fitness: float
    max_fitness: float
    generation: int

# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ: {len(self.active_connections)}")

    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ: {len(self.active_connections)}")

    async def broadcast(self, message: str):
        if self.active_connections:
            await asyncio.gather(
                *[connection.send_text(message) for connection in self.active_connections]
            )

manager = ConnectionManager()

# –ü—Ä–æ—Å—Ç—ã–µ API endpoints
@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üß† –ò–Ω–∫—É–±–∞—Ç–æ—Ä –ú–æ–∑–≥–æ–≤ (–¢–µ—Å—Ç)</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 800px; margin: 0 auto; }
            .header { text-align: center; margin-bottom: 40px; }
            .stats { background: #f5f5f5; padding: 20px; border-radius: 8px; }
            .button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
            .button:hover { background: #0056b3; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üß† –ò–Ω–∫—É–±–∞—Ç–æ—Ä –ú–æ–∑–≥–æ–≤ (–¢–µ—Å—Ç)</h1>
                <p>–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è</p>
            </div>
            
            <div class="stats">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏</h3>
                <p>–†–∞–∑–º–µ—Ä: <span id="population-size">-</span></p>
                <p>–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: <span id="avg-fitness">-</span></p>
                <p>–ü–æ–∫–æ–ª–µ–Ω–∏–µ: <span id="generation">-</span></p>
            </div>
            
            <div style="margin-top: 20px;">
                <button class="button" onclick="testAPI()">üß™ –¢–µ—Å—Ç API</button>
                <button class="button" onclick="getStats()">üìà –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
            </div>
            
            <div id="logs" style="margin-top: 20px; background: #000; color: #0f0; padding: 10px; border-radius: 4px; font-family: monospace; height: 200px; overflow-y: auto;">
                <div>üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ...</div>
            </div>
        </div>
        
        <script>
            let ws = null;
            
            function connectWebSocket() {
                ws = new WebSocket('ws://localhost:8000/ws');
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    addLog(data.message || JSON.stringify(data));
                };
                ws.onclose = function() {
                    addLog('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    setTimeout(connectWebSocket, 1000);
                };
            }
            
            function addLog(message) {
                const logs = document.getElementById('logs');
                const div = document.createElement('div');
                div.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
                logs.appendChild(div);
                logs.scrollTop = logs.scrollHeight;
            }
            
            async function testAPI() {
                try {
                    const response = await fetch('/api/test');
                    const result = await response.json();
                    addLog(`‚úÖ API —Ç–µ—Å—Ç: ${result.message}`);
                } catch (error) {
                    addLog(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
                }
            }
            
            async function getStats() {
                try {
                    const response = await fetch('/api/stats');
                    const stats = await response.json();
                    
                    document.getElementById('population-size').textContent = stats.size;
                    document.getElementById('avg-fitness').textContent = stats.avg_fitness.toFixed(3);
                    document.getElementById('generation').textContent = stats.generation;
                    
                    addLog(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
                } catch (error) {
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
                }
            }
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            connectWebSocket();
            getStats();
        </script>
    </body>
    </html>
    """

@app.get("/api/test")
async def test_api():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API."""
    return {"message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç!", "timestamp": datetime.now().isoformat()}

@app.get("/api/stats", response_model=PopulationStats)
async def get_population_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏."""
    return PopulationStats(
        size=20,
        avg_fitness=0.5,
        max_fitness=0.8,
        generation=1
    )

# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            if message.get("type") == "ping":
                await websocket.send_text(json.dumps({
                    "type": "pong",
                    "timestamp": datetime.now().isoformat()
                }))
                
    except WebSocketDisconnect:
        manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        manager.disconnect(websocket)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("web.simple_api:app", host="0.0.0.0", port=8000, reload=True) 