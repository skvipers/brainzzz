import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
try:
    from brains.brain import Brain
    from brains.genome import Genome
    from brains.growth_rules import GrowthRules
    from dist.parallel_engine import ParallelEngine
    from tasks.task_manager import TaskManager
    from tasks.xor_task import XORTask
    from tasks.sequence_task import SequenceTask
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    Brain = None
    Genome = None
    GrowthRules = None
    ParallelEngine = None
    TaskManager = None
    XORTask = None
    SequenceTask = None

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import json
import asyncio
from typing import List, Dict, Any
import logging
from datetime import datetime

# Redis –∏ Event Bus
from .redis_manager import redis_manager
from .event_bus import event_bus
from .settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Lifespan –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    global parallel_engine, task_manager, population
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
    try:
        redis_connected = await redis_manager.connect()
        if redis_connected:
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Event Bus
    try:
        await event_bus.start()
        logger.info("‚úÖ Event Bus –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Event Bus: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫
    try:
        parallel_engine = ParallelEngine()
        logger.info("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Ray: {e}")
        parallel_engine = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
    task_manager = TaskManager()
    task_manager.add_task(XORTask())
    task_manager.add_task(SequenceTask())
    logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
    await create_initial_population(20)
    logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    yield
    
    # Shutdown
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Event Bus
    try:
        await event_bus.stop()
        logger.info("üõë Event Bus –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Event Bus: {e}")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Redis
    try:
        await redis_manager.disconnect()
        logger.info("üîå Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Redis: {e}")

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üß† –ò–Ω–∫—É–±–∞—Ç–æ—Ä –ú–æ–∑–≥–æ–≤",
    description="–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="web"), name="static")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
parallel_engine: ParallelEngine = None
task_manager: TaskManager = None
population: List[Brain] = []
websocket_connections: List[WebSocket] = []

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (Pydantic)
from pydantic import BaseModel

class BrainInfo(BaseModel):
    id: int
    nodes: int
    connections: int
    gp: float
    fitness: float
    age: int

class PopulationStats(BaseModel):
    size: int
    avg_fitness: float
    max_fitness: float
    avg_nodes: float
    avg_connections: float
    generation: int

class EvolutionRequest(BaseModel):
    mutation_rate: float = 0.3
    population_size: int = 20

# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ: {len(self.active_connections)}")

    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ: {len(self.active_connections)}")

    async def broadcast(self, message: str):
        if self.active_connections:
            await asyncio.gather(
                *[connection.send_text(message) for connection in self.active_connections]
            )

manager = ConnectionManager()

async def create_initial_population(size: int):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –º–æ–∑–≥–æ–≤."""
    global population
    
    population = []
    for i in range(size):
        genome = Genome(input_size=2, output_size=1, hidden_size=3)
        growth_rules = GrowthRules()
        brain = Brain(genome, growth_rules)
        brain.gp = 10.0  # –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
        population.append(brain)
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–ø—É–ª—è—Ü–∏—è –∏–∑ {len(population)} –º–æ–∑–≥–æ–≤")

# API endpoints
@app.get("/brain_visualizer.html", response_class=HTMLResponse)
async def brain_visualizer():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤."""
    with open("web/brain_visualizer.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üß† –ò–Ω–∫—É–±–∞—Ç–æ—Ä –ú–æ–∑–≥–æ–≤</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 800px; margin: 0 auto; }
            .header { text-align: center; margin-bottom: 40px; }
            .stats { background: #f5f5f5; padding: 20px; border-radius: 8px; }
            .button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
            .button:hover { background: #0056b3; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üß† –ò–Ω–∫—É–±–∞—Ç–æ—Ä –ú–æ–∑–≥–æ–≤</h1>
                <p>–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä</p>
            </div>
            
            <div class="stats">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏</h3>
                <p>–†–∞–∑–º–µ—Ä: <span id="population-size">-</span></p>
                <p>–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: <span id="avg-fitness">-</span></p>
                <p>–ü–æ–∫–æ–ª–µ–Ω–∏–µ: <span id="generation">-</span></p>
            </div>
            
            <div class="stats" style="margin-top: 20px;">
                <h3>üî¥ –°—Ç–∞—Ç—É—Å Redis</h3>
                <p>–°—Ç–∞—Ç—É—Å: <span id="redis-status">-</span></p>
                <p>–í–µ—Ä—Å–∏—è: <span id="redis-version">-</span></p>
                <p>–ö–ª–∏–µ–Ω—Ç—ã: <span id="redis-clients">-</span></p>
            </div>
            
            <div style="margin-top: 20px;">
                <button class="button" onclick="startEvolution()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é</button>
                <button class="button" onclick="evaluatePopulation()">üìä –û—Ü–µ–Ω–∏—Ç—å –ø–æ–ø—É–ª—è—Ü–∏—é</button>
                <button class="button" onclick="getStats()">üìà –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
                <button class="button" onclick="checkRedisStatus()">üî¥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Redis</button>
                <button class="button" onclick="openVisualizer()">üß† –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä</button>
            </div>
            
            <div id="logs" style="margin-top: 20px; background: #000; color: #0f0; padding: 10px; border-radius: 4px; font-family: monospace; height: 200px; overflow-y: auto;">
                <div>üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ...</div>
            </div>
        </div>
        
        <script>
            let ws = null;
            
            function connectWebSocket() {
                ws = new WebSocket('ws://localhost:8000/ws');
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    addLog(data.message || JSON.stringify(data));
                };
                ws.onclose = function() {
                    addLog('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    setTimeout(connectWebSocket, 1000);
                };
            }
            
            function addLog(message) {
                const logs = document.getElementById('logs');
                const div = document.createElement('div');
                div.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
                logs.appendChild(div);
                logs.scrollTop = logs.scrollHeight;
            }
            
            async function startEvolution() {
                const response = await fetch('/api/evolve', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({mutation_rate: 0.3, population_size: 20})
                });
                const result = await response.json();
                addLog(`üöÄ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: ${result.message}`);
            }
            
            async function evaluatePopulation() {
                const response = await fetch('/api/evaluate');
                const result = await response.json();
                addLog(`üìä –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.message}`);
            }
            
            async function getStats() {
                const response = await fetch('/api/stats');
                const stats = await response.json();
                
                document.getElementById('population-size').textContent = stats.size;
                document.getElementById('avg-fitness').textContent = stats.avg_fitness.toFixed(3);
                document.getElementById('generation').textContent = stats.generation;
                
                addLog(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            }
            
            async function checkRedisStatus() {
                try {
                    const response = await fetch('/api/redis/status');
                    const status = await response.json();
                    
                    document.getElementById('redis-status').textContent = status.status;
                    document.getElementById('redis-version').textContent = status.stats.redis_version || '-';
                    document.getElementById('redis-clients').textContent = status.stats.connected_clients || '-';
                    
                    if (status.status === 'connected') {
                        addLog(`‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: ${status.stats.redis_version}`);
                    } else {
                        addLog(`‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${status.status}`);
                    }
                } catch (error) {
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: ${error.message}`);
                }
            }
            
            function openVisualizer() {
                window.open('/brain_visualizer.html', '_blank', 'width=1400,height=800');
            }
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            connectWebSocket();
            getStats();
            checkRedisStatus();
        </script>
    </body>
    </html>
    """

@app.get("/api/stats", response_model=PopulationStats)
async def get_population_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏."""
    try:
        if not population:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –ø–æ–ø—É–ª—è—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
            return PopulationStats(
                size=0,
                avg_fitness=0.0,
                max_fitness=0.0,
                avg_nodes=0.0,
                avg_connections=0.0,
                generation=0
            )
        
        if parallel_engine:
            stats = parallel_engine.get_population_statistics(population, task_manager)
            return PopulationStats(
                size=len(population),
                avg_fitness=stats['avg_fitness'],
                max_fitness=stats['max_fitness'],
                avg_nodes=stats['avg_nodes'],
                avg_connections=stats.get('avg_complexity', 0.0),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º complexity –∫–∞–∫ connections
                generation=0  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π
            )
        else:
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ Ray
            try:
                fitnesses = [brain.fitness for brain in population]
                nodes = [brain.phenotype.num_nodes for brain in population]
                connections = [len(brain.genome.connection_genes) for brain in population]
                
                return PopulationStats(
                    size=len(population),
                    avg_fitness=sum(fitnesses) / len(fitnesses) if fitnesses else 0,
                    max_fitness=max(fitnesses) if fitnesses else 0,
                    avg_nodes=sum(nodes) / len(nodes) if nodes else 0,
                    avg_connections=sum(connections) / len(connections) if connections else 0,
                    generation=0
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                return PopulationStats(
                    size=len(population),
                    avg_fitness=0.0,
                    max_fitness=0.0,
                    avg_nodes=0.0,
                    avg_connections=0.0,
                    generation=0
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return PopulationStats(
            size=0,
            avg_fitness=0.0,
            max_fitness=0.0,
            avg_nodes=0.0,
            avg_connections=0.0,
            generation=0
        )

@app.get("/api/redis/status")
async def get_redis_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Redis."""
    try:
        if redis_manager.is_connected:
            stats = await redis_manager.get_system_stats()
            return {
                "status": "connected",
                "stats": stats,
                "timestamp": datetime.now().isoformat()
            }
        else:
            return {
                "status": "disconnected",
                "stats": {},
                "timestamp": datetime.now().isoformat()
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Redis: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/api/population/{brain_id}")
async def get_brain_detail(brain_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–æ–∑–≥–µ."""
    if not population:
        raise HTTPException(status_code=404, detail="–ü–æ–ø—É–ª—è—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    if brain_id >= len(population) or brain_id < 0:
        raise HTTPException(status_code=404, detail="–ú–æ–∑–≥ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    brain = population[brain_id]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        nodes = []
        connections = []
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∑–ª–∞—Ö
        num_nodes = brain.phenotype.num_nodes
        for i in range(num_nodes):
            node_info = {
                "id": i,
                "type": "hidden",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "activation": "sigmoid",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é sigmoid
                "bias": brain.genome.node_genes[i].bias if i < len(brain.genome.node_genes) else 0.0,
                "threshold": brain.genome.node_genes[i].threshold if i < len(brain.genome.node_genes) else 0.0
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–∑–ª–∞
            if i < brain.genome.input_size:
                node_info["type"] = "input"
            elif i >= brain.genome.input_size + brain.genome.hidden_size:
                node_info["type"] = "output"
            elif hasattr(brain.genome.node_genes[i], 'memory') and brain.genome.node_genes[i].memory:
                node_info["type"] = "memory"
            
            nodes.append(node_info)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑—è—Ö
        for i, conn in enumerate(brain.genome.connection_genes):
            connection_info = {
                "id": i,
                "from": conn.from_node,
                "to": conn.to_node,
                "weight": conn.weight,
                "plasticity": conn.plasticity,
                "enabled": conn.enabled
            }
            connections.append(connection_info)
        
        brain_detail = {
            "id": brain_id,
            "nodes": nodes,
            "connections": connections,
            "gp": brain.gp,
            "fitness": brain.fitness,
            "age": brain.age,
            "genome_size": len(brain.genome.node_genes),
            "connection_count": len(brain.genome.connection_genes)
        }
        
        return brain_detail
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–æ–∑–≥–∞ {brain_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {str(e)}")

@app.get("/api/population", response_model=List[BrainInfo])
async def get_population():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—É–ª—è—Ü–∏–∏."""
    if not population:
        raise HTTPException(status_code=404, detail="–ü–æ–ø—É–ª—è—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    brain_infos = []
    for i, brain in enumerate(population):
        brain_infos.append(BrainInfo(
            id=i,
            nodes=brain.phenotype.num_nodes,
            connections=len(brain.genome.connection_genes),
            gp=brain.gp,
            fitness=brain.fitness,
            age=brain.age
        ))
    
    return brain_infos

@app.post("/api/evaluate")
async def evaluate_population():
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Å—é –ø–æ–ø—É–ª—è—Ü–∏—é."""
    if not population:
        raise HTTPException(status_code=404, detail="–ü–æ–ø—É–ª—è—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    if not task_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        if parallel_engine:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            results = parallel_engine.evaluate_population_parallel(population, task_manager)
            message = f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –º–æ–∑–≥–æ–≤"
        else:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            for brain in population:
                brain.evaluate_fitness(task_manager)
            message = f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(population)} –º–æ–∑–≥–æ–≤"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await manager.broadcast(json.dumps({
            "type": "evaluation_complete",
            "message": message,
            "timestamp": datetime.now().isoformat()
        }))
        
        return {"message": message, "success": True}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {str(e)}")

@app.post("/api/evolve")
async def evolve_population(request: EvolutionRequest):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–≤–æ–ª—é—Ü–∏—é –ø–æ–ø—É–ª—è—Ü–∏–∏."""
    global population
    
    if not population:
        raise HTTPException(status_code=404, detail="–ü–æ–ø—É–ª—è—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
        current_size = len(population)
        target_size = request.population_size
        
        if target_size != current_size:
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å {current_size} –Ω–∞ {target_size}")
            
            if target_size > current_size:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–æ–∑–≥–∏
                for i in range(target_size - current_size):
                    genome = Genome(input_size=2, output_size=1, hidden_size=3)
                    growth_rules = GrowthRules()
                    brain = Brain(genome, growth_rules)
                    brain.gp = 10.0  # –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
                    population.append(brain)
                message = f"–ü–æ–ø—É–ª—è—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ —Å {current_size} –¥–æ {target_size} –º–æ–∑–≥–æ–≤"
            else:
                # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é - –æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏—Ö
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ fitness –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏—Ö
                population.sort(key=lambda x: x.fitness, reverse=True)
                population = population[:target_size]
                message = f"–ü–æ–ø—É–ª—è—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ —Å {current_size} –¥–æ {target_size} –º–æ–∑–≥–æ–≤ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ)"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–≤–æ–ª—é—Ü–∏—é (–º—É—Ç–∞—Ü–∏–∏)
        if parallel_engine:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
            evolved_population = parallel_engine.evolve_population_parallel(
                population, request.mutation_rate
            )
            evolution_message = f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(evolved_population)} –º–æ–∑–≥–æ–≤"
        else:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
            evolved_population = []
            for brain in population:
                brain_copy = brain.clone()
                if brain_copy.mutate(request.mutation_rate):
                    evolved_population.append(brain_copy)
                else:
                    evolved_population.append(brain)
            evolution_message = f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(evolved_population)} –º–æ–∑–≥–æ–≤"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
        population = evolved_population
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await manager.broadcast(json.dumps({
            "type": "evolution_complete",
            "message": f"{message}. {evolution_message}",
            "population_size": len(population),
            "timestamp": datetime.now().isoformat()
        }))
        
        return {
            "message": f"{message}. {evolution_message}",
            "population_size": len(population),
            "success": True
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {str(e)}")

@app.post("/api/population/resize")
async def resize_population(request: EvolutionRequest):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏ –±–µ–∑ —ç–≤–æ–ª—é—Ü–∏–∏."""
    global population
    
    if not population:
        raise HTTPException(status_code=404, detail="–ü–æ–ø—É–ª—è—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    try:
        current_size = len(population)
        target_size = request.population_size
        
        if target_size == current_size:
            return {
                "message": f"–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏ —É–∂–µ {current_size}",
                "population_size": current_size,
                "success": True
            }
        
        if target_size > current_size:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
            for i in range(target_size - current_size):
                genome = Genome(input_size=2, output_size=1, hidden_size=3)
                growth_rules = GrowthRules()
                brain = Brain(genome, growth_rules)
                brain.gp = 10.0  # –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
                population.append(brain)
            message = f"–ü–æ–ø—É–ª—è—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ —Å {current_size} –¥–æ {target_size} –º–æ–∑–≥–æ–≤"
        else:
            # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é - –æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏—Ö
            population.sort(key=lambda x: x.fitness, reverse=True)
            population = population[:target_size]
            message = f"–ü–æ–ø—É–ª—è—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ —Å {current_size} –¥–æ {target_size} –º–æ–∑–≥–æ–≤ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ)"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await manager.broadcast(json.dumps({
            "type": "population_resized",
            "message": message,
            "population_size": len(population),
            "timestamp": datetime.now().isoformat()
        }))
        
        return {
            "message": message,
            "population_size": len(population),
            "success": True
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {str(e)}")

# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            if message.get("type") == "ping":
                await websocket.send_text(json.dumps({
                    "type": "pong",
                    "timestamp": datetime.now().isoformat()
                }))
                
    except WebSocketDisconnect:
        manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        manager.disconnect(websocket)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("web.api:app", host="0.0.0.0", port=8000, reload=True) 