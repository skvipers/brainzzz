import { useEffect, useRef, useCallback, useState } from 'react';

interface WebSocketMessage {
  type: string;
  schema_version: string;
  ts: string;
  data: any;
}

interface UseWebSocketOptions {
  url: string;
  onMessage?: (message: WebSocketMessage) => void;
  onOpen?: () => void;
  onClose?: () => void;
  onError?: (error: Event) => void;
  reconnectInterval?: number;
  maxReconnectAttempts?: number;
}

export const useWebSocket = ({
  url,
  onMessage,
  onOpen,
  onClose,
  onError,
  reconnectInterval = 3000,
  maxReconnectAttempts = 5,
}: UseWebSocketOptions) => {
  const [isConnected, setIsConnected] = useState(false);
  const [reconnectAttempts, setReconnectAttempts] = useState(0);
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<number | null>(null);
  const isConnectingRef = useRef(false);

  const connect = useCallback(() => {
    if (isConnectingRef.current) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ
    if (wsRef.current && isConnected) {
      console.log('üîå WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é');
      return;
    }

    try {
      isConnectingRef.current = true;
      console.log('üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ WebSocket:', url);

      const ws = new WebSocket(url);

      ws.onopen = () => {
        console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        setIsConnected(true);
        setReconnectAttempts(0);
        isConnectingRef.current = false;
        onOpen?.();
      };

      ws.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);
          console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', message);
          onMessage?.(message);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };

      ws.onclose = (event) => {
        console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
        setIsConnected(false);
        isConnectingRef.current = false;
        onClose?.();

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (event.code !== 1000 && reconnectAttempts < maxReconnectAttempts) {
          console.log(
            `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts + 1}/${maxReconnectAttempts}`,
          );

          reconnectTimeoutRef.current = setTimeout(() => {
            setReconnectAttempts((prev) => prev + 1);
            connect();
          }, reconnectInterval) as unknown as number;
        } else if (reconnectAttempts >= maxReconnectAttempts) {
          console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        isConnectingRef.current = false;
        onError?.(error);
      };

      wsRef.current = ws;
      console.log('üîå WebSocket –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ref');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      isConnectingRef.current = false;
    }
  }, [
    url,
    onMessage,
    onOpen,
    onClose,
    onError,
    reconnectInterval,
    maxReconnectAttempts,
    reconnectAttempts,
    isConnected,
  ]);

  const disconnect = useCallback(() => {
    console.log('üîå –í—ã–∑—ã–≤–∞—é disconnect');

    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
      console.log('üîå –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω');
    }

    if (wsRef.current) {
      console.log('üîå –ó–∞–∫—Ä—ã–≤–∞—é WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      wsRef.current.close(1000); // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
      wsRef.current = null;
      console.log('üîå WebSocket –æ–±—ä–µ–∫—Ç –æ—á–∏—â–µ–Ω');
    }

    setIsConnected(false);
    setReconnectAttempts(0);
    isConnectingRef.current = false;
    console.log('üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket —Å–±—Ä–æ—à–µ–Ω–æ');
  }, []);

  const sendMessage = useCallback(
    (message: any) => {
      if (wsRef.current && isConnected) {
        try {
          const messageStr = typeof message === 'string' ? message : JSON.stringify(message);
          wsRef.current.send(messageStr);
          console.log('üì§ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', message);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      } else {
        console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    },
    [isConnected],
  );

  useEffect(() => {
    connect();

    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }
      disconnect();
    };
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - connect –∏ disconnect —Å—Ç–∞–±–∏–ª—å–Ω—ã

  return {
    isConnected,
    sendMessage,
    disconnect,
    connect,
  };
};
