import { create } from 'zustand'
import axios from 'axios'

interface Brain {
  id: number
  nodes: number
  connections: number
  gp: number
  fitness: number
  age: number
}

interface PopulationStats {
  size: number
  avg_fitness: number
  max_fitness: number
  avg_nodes: number
  avg_connections: number
  generation: number
}

interface WebSocketMessage {
  type: string
  schema_version: string
  ts: string
  data: any
}

interface BrainStore {
  population: Brain[]
  stats: PopulationStats
  loading: boolean
  error: string | null

  // WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  wsConnected: boolean
  lastEvent: WebSocketMessage | null

  // Actions
  fetchPopulation: () => Promise<void>
  fetchStats: () => Promise<void>
  startEvolution: (mutationRate: number, populationSize?: number) => Promise<void>
  evaluatePopulation: () => Promise<void>
  resetError: () => void

  // WebSocket actions
  setWebSocketConnected: (connected: boolean) => void
  handleWebSocketMessage: (message: WebSocketMessage) => void
}

const API_BASE = '/api'

export const useBrainStore = create<BrainStore>((set, get) => ({
  population: [],
  stats: {
    size: 0,
    avg_fitness: 0,
    max_fitness: 0,
    avg_nodes: 0,
    avg_connections: 0,
    generation: 0,
  },
  loading: false,
  error: null,

  // WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  wsConnected: false,
  lastEvent: null,

  fetchPopulation: async () => {
    try {
      set({ loading: true, error: null })
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ø—É–ª—è—Ü–∏—é –∏–∑:', `${API_BASE}/population`)

      const response = await axios.get(`${API_BASE}/population`)
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—É–ª—è—Ü–∏–∏:', response.data)

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (Array.isArray(response.data)) {
        set({ population: response.data, loading: false })
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ü–∏–∏')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏:', error)
      set({
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏',
        loading: false
      })
    }
  },

  fetchStats: async () => {
    try {
      set({ loading: true, error: null })
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑:', `${API_BASE}/stats`)

      const response = await axios.get(`${API_BASE}/stats`)
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', response.data)

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const data = response.data
      if (data &&
          typeof data.size === 'number' &&
          typeof data.avg_fitness === 'number' &&
          typeof data.max_fitness === 'number' &&
          typeof data.avg_nodes === 'number' &&
          typeof data.avg_connections === 'number' &&
          typeof data.generation === 'number') {
        set({ stats: data, loading: false })
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      set({
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        loading: false
      })
    }
  },

  startEvolution: async (mutationRate: number, populationSize?: number) => {
    try {
      set({ loading: true, error: null })

      const currentPopulationSize = populationSize || get().population.length || 20

      await axios.post(`${API_BASE}/evolve`, {
        mutation_rate: mutationRate,
        population_size: currentPopulationSize
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —ç–≤–æ–ª—é—Ü–∏–∏
      await get().fetchPopulation()
      await get().fetchStats()
      set({ loading: false })
    } catch (error) {
      set({
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏',
        loading: false
      })
    }
  },

  evaluatePopulation: async () => {
    try {
      set({ loading: true, error: null })
      await axios.post(`${API_BASE}/evaluate`)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏
      await get().fetchStats()
      set({ loading: false })
    } catch (error) {
      set({
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏',
        loading: false
      })
    }
  },

  resetError: () => set({ error: null }),

  // WebSocket actions
  setWebSocketConnected: (connected: boolean) => {
    console.log(`üîå WebSocket ${connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`)
    set({ wsConnected: connected })
  },

  handleWebSocketMessage: (message: WebSocketMessage) => {
    console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è:', message)
    set({ lastEvent: message })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    switch (message.type) {
      case 'population_update':
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket')
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        get().fetchPopulation()
        break

      case 'brain_update':
        console.log('üß† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∑–≥–∞ —á–µ—Ä–µ–∑ WebSocket')
        // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–∑–≥
        break

      case 'evolution_step':
        console.log('üîÑ –®–∞–≥ —ç–≤–æ–ª—é—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket')
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        get().fetchStats()
        break

      case 'system_status':
        console.log('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ WebSocket:', message.data)
        break

      default:
        console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type)
    }
  },
}))
