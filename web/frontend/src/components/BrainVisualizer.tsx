import React, { useEffect, useRef, useState } from 'react'
import cytoscape, { Core, NodeSingular, EdgeSingular } from 'cytoscape'
import { Brain, Eye, Settings, Download, RotateCcw, Info, BarChart3, Activity } from 'lucide-react'

interface BrainNode {
  id: number
  type: 'input' | 'output' | 'hidden' | 'memory'
  activation: string
  bias: number
  threshold: number
}

interface BrainConnection {
  id: number
  from: number
  to: number
  weight: number
  plasticity: number
  enabled: boolean
}

interface BrainVisualizerProps {
  brainId: number
  onClose?: () => void
}

interface SelectedElement {
  type: 'node' | 'edge'
  data: any
}

const BrainVisualizer = ({ brainId, onClose }: BrainVisualizerProps) => {
  const cyRef = useRef<HTMLDivElement>(null)
  const cyInstanceRef = useRef<cytoscape.Core | null>(null)
  const [brainData, setBrainData] = useState<{
    id: number
    nodes: BrainNode[]
    connections: BrainConnection[]
    gp: number
    fitness: number
    age: number
  } | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [layout, setLayout] = useState<'grid' | 'circle' | 'random' | 'concentric'>('concentric')
  const [showWeights, setShowWeights] = useState(true)
  const [nodeSize, setNodeSize] = useState(30)
  const [selectedElement, setSelectedElement] = useState<SelectedElement | null>(null)
  const [showStats, setShowStats] = useState(true)
  const [showDisabledConnections, setShowDisabledConnections] = useState(false)
  const [showLegend, setShowLegend] = useState(true)

  // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–∑–≥–∞
  const validateBrainData = (data: any): boolean => {
    if (!data || typeof data !== 'object') {
      console.error('‚ùå –î–∞–Ω–Ω—ã–µ –º–æ–∑–≥–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º:', data)
      return false
    }

    if (!Array.isArray(data.nodes) || !Array.isArray(data.connections)) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç nodes –∏–ª–∏ connections:', data)
      return false
    }

    if (typeof data.gp !== 'number' || typeof data.fitness !== 'number' || typeof data.age !== 'number') {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è gp, fitness –∏–ª–∏ age:', data)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∑–ª–æ–≤
    for (const node of data.nodes) {
      if (!node.id || !node.type || !node.activation || typeof node.bias !== 'number' || typeof node.threshold !== 'number') {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞:', node)
        return false
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≤—è–∑–µ–π
    for (const conn of data.connections) {
      if (!conn.id || !conn.from || !conn.to || typeof conn.weight !== 'number' || typeof conn.plasticity !== 'number' || typeof conn.enabled !== 'boolean') {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤—è–∑–∏:', conn)
        return false
      }
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –º–æ–∑–≥–∞ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
    return true
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∑–≥–∞
  const calculateBrainStats = () => {
    if (!brainData) return null

    const enabledConnections = brainData.connections.filter(c => c.enabled)
    const weights = enabledConnections.map(c => c.weight)
    const plasticities = enabledConnections.map(c => c.plasticity)

    const nodeTypes = brainData.nodes.reduce((acc, node) => {
      acc[node.type] = (acc[node.type] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    return {
      totalNodes: brainData.nodes.length,
      totalConnections: enabledConnections.length,
      networkDensity: enabledConnections.length / (brainData.nodes.length * (brainData.nodes.length - 1)),
      avgWeight: weights.reduce((a, b) => a + b, 0) / weights.length,
      weightStd: Math.sqrt(weights.reduce((acc, w) => acc + Math.pow(w - weights.reduce((a, b) => a + b, 0) / weights.length, 2), 0) / weights.length),
      avgPlasticity: plasticities.reduce((a, b) => a + b, 0) / plasticities.length,
      nodeTypes,
      positiveConnections: weights.filter(w => w > 0).length,
      negativeConnections: weights.filter(w => w < 0).length,
      strongConnections: weights.filter(w => Math.abs(w) > 0.5).length
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–∑–≥–µ
  useEffect(() => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤
    let isMounted = true

    const fetchBrainData = async () => {
      try {
        if (!isMounted) return
        setLoading(true)
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–∑–≥–∞ #', brainId)

        const response = await fetch(`/api/population/${brainId}`)
        console.log('üì° API Response status:', response.status)

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`)
        }

        const data = await response.json()
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data)

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–∞—Ö —Å–≤—è–∑–µ–π
        if (data.connections) {
          console.log('üîç –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–æ–≤ —Å–≤—è–∑–µ–π:')
          data.connections.forEach((conn: any) => {
            const weight = conn.weight
            let category = ''
            if (weight > 0.7) category = '–û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è (>0.7)'
            else if (weight > 0.3) category = '–°–∏–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è (0.3-0.7)'
            else if (weight > 0) category = '–°–ª–∞–±–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è (0-0.3)'
            else if (weight < -0.7) category = '–û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è (<-0.7)'
            else if (weight < -0.3) category = '–°–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è (-0.7--0.3)'
            else if (weight < 0) category = '–°–ª–∞–±–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è (-0.3-0)'
            else category = '–ù—É–ª–µ–≤–∞—è (=0)'

            console.log(`  –°–≤—è–∑—å ${conn.id}: –≤–µ—Å=${weight}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è=${category}, enabled=${conn.enabled}`)
          })
        }

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        if (validateBrainData(data) && isMounted) {
          setBrainData(data)

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π, –µ—Å–ª–∏ –≤—Å–µ —Å–≤—è–∑–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
          if (data.connections && data.connections.length > 0 && data.connections.every(c => !c.enabled)) {
            console.log('‚ö†Ô∏è –í—Å–µ —Å–≤—è–∑–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é –ø–æ–∫–∞–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π')
            setShowDisabledConnections(true)
          }
        } else if (isMounted) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∑–≥–∞')
        }
      } catch (err) {
        if (isMounted) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err)
          setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
        }
      } finally {
        if (isMounted) {
          setLoading(false)
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ brainId –∏–∑–º–µ–Ω–∏–ª—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (brainId && (!brainData || brainData.id !== brainId)) {
      fetchBrainData()
    }

    return () => {
      isMounted = false
    }
  }, [brainId]) // –£–±–∏—Ä–∞–µ–º brainData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cytoscape
  useEffect(() => {
    if (!cyRef.current || !brainData) {
      console.log('‚ö†Ô∏è –ù–µ –º–æ–≥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Cytoscape:', {
        hasRef: !!cyRef.current,
        hasData: !!brainData
      })
      return
    }

    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Cytoscape —Å –¥–∞–Ω–Ω—ã–º–∏:', brainData)

    try {
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Cytoscape
      const elements = {
        nodes: brainData.nodes.map(node => ({
          data: {
            id: node.id.toString(),
            label: `${node.type.charAt(0).toUpperCase()}${node.id}`,
            type: node.type,
            activation: node.activation,
            bias: node.bias,
            threshold: node.threshold,
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
            fullLabel: `${node.type.toUpperCase()} ${node.id}\n${node.activation}\nbias: ${node.bias.toFixed(3)}\nthreshold: ${node.threshold.toFixed(3)}`
          }
        })),
        edges: brainData.connections
          .filter(conn => conn.enabled || showDisabledConnections)
          .map(conn => ({
            data: {
              id: `edge_${conn.id}_${conn.from}_${conn.to}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏
              source: conn.from.toString(),
              target: conn.to.toString(),
              weight: conn.weight,
              plasticity: conn.plasticity,
              enabled: conn.enabled,
              label: showWeights ? conn.weight.toFixed(2) : '',
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
              fullLabel: `–°–≤—è–∑—å ${conn.id}\n–í–µ—Å: ${conn.weight.toFixed(3)}\n–ü–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å: ${conn.plasticity.toFixed(3)}\n${conn.weight > 0 ? '–í–æ–∑–±—É–∂–¥–∞—é—â–∞—è' : '–¢–æ—Ä–º–æ–∑—è—â–∞—è'}\n${conn.enabled ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}`
            }
          }))
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:')
      console.log('  - –§–æ—Ä–º–∞—Ç —É–∑–ª–∞:', JSON.stringify(elements.nodes[0], null, 2))
      console.log('  - –§–æ—Ä–º–∞—Ç —Å–≤—è–∑–∏:', JSON.stringify(elements.edges[0], null, 2))
      console.log('  - –í—Å–µ —É–∑–ª—ã –∏–º–µ—é—Ç data.id:', elements.nodes.every(n => n.data && n.data.id))
      console.log('  - –í—Å–µ —Å–≤—è–∑–∏ –∏–º–µ—é—Ç data.source –∏ data.target:', elements.edges.every(e => e.data && e.data.source && e.data.target))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∑–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è —Å–≤—è–∑–µ–π
      const nodeIds = new Set(elements.nodes.map(n => n.data.id))
      const invalidEdges = elements.edges.filter(edge =>
        !nodeIds.has(edge.data.source) || !nodeIds.has(edge.data.target)
      )
      if (invalidEdges.length > 0) {
        console.warn('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É–∑–ª–∞–º–∏:', invalidEdges)
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
      console.log('üîç –î–µ—Ç–∞–ª–∏ —Å–≤—è–∑–µ–π:')
      elements.edges.forEach((edge, index) => {
        console.log(`  –°–≤—è–∑—å ${index + 1}:`, {
          id: edge.data.id,
          source: edge.data.source,
          target: edge.data.target,
          weight: edge.data.weight,
          sourceExists: nodeIds.has(edge.data.source),
          targetExists: nodeIds.has(edge.data.target)
        })
      })

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Cytoscape
      const cy = cytoscape({
        container: cyRef.current,
        elements: elements, // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—É–∑–ª—ã –∏ —Å–≤—è–∑–∏)
        style: [
          // –°—Ç–∏–ª–∏ –¥–ª—è —É–∑–ª–æ–≤
          {
            selector: 'node',
            style: {
              'background-color': '#e5e7eb',
              'border-color': '#374151',
              'border-width': '3px',
              'width': function(ele: NodeSingular) {
                const nodeType = ele.data('type') as string
                if (nodeType === 'input' || nodeType === 'output') return (nodeSize * 1.2).toString()
                if (nodeType === 'memory') return (nodeSize * 1.1).toString()
                return nodeSize.toString()
              },
              'height': function(ele: NodeSingular) {
                const nodeType = ele.data('type') as string
                if (nodeType === 'input' || nodeType === 'output') return (nodeSize * 1.2).toString()
                if (nodeType === 'memory') return (nodeSize * 1.1).toString()
                return nodeSize.toString()
              },
              'label': 'data(label)',
              'font-size': 10,
              'font-weight': 'bold',
              'text-valign': 'center',
              'text-halign': 'center',
              'text-wrap': 'wrap',
              'text-max-width': (nodeSize * 0.8).toString(),
              'text-outline-color': 'white',
              'text-outline-width': '2px',
              'shape': 'ellipse'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —É–∑–ª–æ–≤
          {
            selector: 'node[type = "input"]',
            style: {
              'background-color': '#3b82f6',
              'border-color': '#1e40af',
              'border-width': '4px',
              'color': 'white',
              'text-outline-color': '#1e40af',
              'text-outline-width': '2px'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —É–∑–ª–æ–≤
          {
            selector: 'node[type = "output"]',
            style: {
              'background-color': '#10b981',
              'border-color': '#047857',
              'border-width': '4px',
              'color': 'white',
              'text-outline-color': '#047857',
              'text-outline-width': '2px'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —É–∑–ª–æ–≤
          {
            selector: 'node[type = "hidden"]',
            style: {
              'background-color': '#f59e0b',
              'border-color': '#d97706',
              'border-width': '3px',
              'color': 'white',
              'text-outline-color': '#d97706',
              'text-outline-width': '2px'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è —É–∑–ª–æ–≤ –ø–∞–º—è—Ç–∏
          {
            selector: 'node[type = "memory"]',
            style: {
              'background-color': '#8b5cf6',
              'border-color': '#7c3aed',
              'border-width': '3px',
              'color': 'white',
              'text-outline-color': '#7c3aed',
              'text-outline-width': '2px'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è —Å–≤—è–∑–µ–π
          {
            selector: 'edge',
            style: {
              'width': function(ele: EdgeSingular) {
                const weight = Math.abs(ele.data('weight') as number)
                const enabled = ele.data('enabled') as boolean
                if (!enabled) return 1
                return Math.max(1.5, weight * 4 + 1.5)
              },
              'line-color': '#6b7280', // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
              'target-arrow-color': '#6b7280', // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
              'target-arrow-shape': 'triangle',
              'arrow-scale': function(ele: EdgeSingular) {
                const enabled = ele.data('enabled') as boolean
                return enabled ? 0.8 : 0.4
              },
              'curve-style': 'bezier',
              'line-style': function(ele: EdgeSingular) {
                const enabled = ele.data('enabled') as boolean
                return enabled ? 'solid' : 'dashed'
              },
              'label': function(ele: EdgeSingular) {
                if (!showWeights) return ''
                const weight = ele.data('weight') as number
                const plasticity = ele.data('plasticity') as number
                const enabled = ele.data('enabled') as boolean
                if (!enabled) return 'DISABLED'
                return `${weight.toFixed(2)}\n${plasticity.toFixed(2)}`
              },
              'font-size': 8,
              'text-rotation': 'autorotate',
              'text-margin-y': -15,
              'text-outline-color': 'white',
              'text-outline-width': '2px',
              'text-background-color': 'rgba(255, 255, 255, 0.8)',
              'text-background-padding': '2px',
              'text-background-opacity': 0.8
            }
          }
        ],
        layout: {
          name: layout,
          ...(layout === 'concentric' && {
            concentric: function(node: any) {
              return node.degree()
            },
            levelWidth: function(nodes: any) {
              return 2
            },
            animate: true,
            animationDuration: 1000
          }),
          ...(layout === 'circle' && {
            radius: 200,
            startAngle: 0,
            sweep: 360
          }),
          ...(layout === 'grid' && {
            rows: Math.ceil(Math.sqrt(brainData.nodes.length)),
            cols: Math.ceil(Math.sqrt(brainData.nodes.length))
          })
        } as any
      })

      console.log('‚úÖ Cytoscape –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:')
      console.log('  –£–∑–ª—ã:', cy.elements('node').length)
      console.log('  –°–≤—è–∑–∏:', cy.elements('edge').length)
      console.log('  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', cy.elements().length)

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ 50ms:')
        console.log('  –£–∑–ª—ã:', cy.elements('node').length)
        console.log('  –°–≤—è–∑–∏:', cy.elements('edge').length)
        console.log('  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', cy.elements().length)
      }, 50)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
      cyInstanceRef.current = cy

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      cy.on('tap', 'node', function(evt) {
        const node = evt.target as NodeSingular
        const data = node.data()
        setSelectedElement({
          type: 'node',
          data: data
        })
        console.log('üëÜ –£–∑–µ–ª:', data)
      })

      cy.on('tap', 'edge', function(evt) {
        const edge = evt.target as EdgeSingular
        const data = edge.data()
        setSelectedElement({
          type: 'edge',
          data: data
        })
        console.log('üëÜ –°–≤—è–∑—å:', data)
      })

      // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
      cy.on('tap', function(evt) {
        if (evt.target === cy) {
          setSelectedElement(null)
        }
      })

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
      cy.fit()
      cy.center()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:')
      console.log('  –û–∂–∏–¥–∞–ª–æ—Å—å —É–∑–ª–æ–≤:', elements.nodes.length)
      console.log('  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–∑–ª–æ–≤:', cy.elements('node').length)
      console.log('  –û–∂–∏–¥–∞–ª–æ—Å—å —Å–≤—è–∑–µ–π:', elements.edges.length)
      console.log('  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–µ–π:', cy.elements('edge').length)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Å–≤—è–∑—è–º –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('üéØ –í—ã–∑—ã–≤–∞—é applyEdgeStyles –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...')
      setTimeout(() => {
        applyEdgeStyles(cy)
      }, 200) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      setTimeout(() => {
        try {
          cy.resize()
          cy.fit()
          cy.center()

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:')
          console.log('  –£–∑–ª—ã:', cy.elements('node').length)
          console.log('  –°–≤—è–∑–∏:', cy.elements('edge').length)
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:', err)
        }
      }, 200)

      return () => {
        console.log('üßπ –£–Ω–∏—á—Ç–æ–∂–∞—é Cytoscape')
        cy.destroy()
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Cytoscape:', err)
      setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  }, [brainData, layout, showWeights, nodeSize]) // –£–±–∏—Ä–∞–µ–º showDisabledConnections –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
  const isFirstRender = useRef(true)

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ showDisabledConnections
  useEffect(() => {
    if (!cyInstanceRef.current || !brainData) return

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º useEffect
    if (isFirstRender.current) {
      isFirstRender.current = false
      return
    }

    const cy = cyInstanceRef.current
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–≤—è–∑–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ showDisabledConnections:', showDisabledConnections)
    console.log('üîç –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:', cy.elements('edge').length)

    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
      cy.elements('edge').remove()
      console.log('üóëÔ∏è –í—Å–µ —Å–≤—è–∑–∏ —É–¥–∞–ª–µ–Ω—ã')

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è showDisabledConnections
      console.log('üîç –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö:', brainData.connections.length)
      console.log('üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π:', brainData.connections.filter(c => c.enabled).length)
      console.log('üîç –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π:', brainData.connections.filter(c => !c.enabled).length)

      const filteredConnections = brainData.connections.filter(conn => conn.enabled || showDisabledConnections)
      console.log('üîç –°–≤—è–∑–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredConnections.length)

      const newEdges = filteredConnections.map(conn => ({
          data: {
            id: `edge_${conn.id}_${conn.from}_${conn.to}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏
            source: conn.from.toString(),
            target: conn.to.toString(),
            weight: conn.weight,
            plasticity: conn.plasticity,
            enabled: conn.enabled,
            label: showWeights ? conn.weight.toFixed(2) : '',
            fullLabel: `–°–≤—è–∑—å ${conn.id}\n–í–µ—Å: ${conn.weight.toFixed(3)}\n–ü–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å: ${conn.plasticity.toFixed(3)}\n${conn.weight > 0 ? '–í–æ–∑–±—É–∂–¥–∞—é—â–∞—è' : '–¢–æ—Ä–º–æ–∑—è—â–∞—è'}\n${conn.enabled ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}`
          }
        }))

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
      const addedEdges = cy.add(newEdges)
      console.log('üîç –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏:', addedEdges.length)
      console.log('üîç –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –≤ Cytoscape –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', cy.elements('edge').length)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –Ω–æ–≤—ã–º —Å–≤—è–∑—è–º
      setTimeout(() => {
        applyEdgeStyles(cy)
      }, 50)

      console.log('‚úÖ –°–≤—è–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', newEdges.length)
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π:', err)
    }
  }, [showDisabledConnections, brainData, showWeights])

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π layout
  const applyLayout = () => {
    if (!cyInstanceRef.current) return

    const cy = cyInstanceRef.current
    const layoutOptions = {
      name: layout,
      ...(layout === 'concentric' && {
        concentric: function(node: any) {
          return node.degree()
        },
        levelWidth: function(nodes: any) {
          return 2
        },
        animate: true,
        animationDuration: 1000
      }),
      ...(layout === 'circle' && {
        radius: 200,
        startAngle: 0,
        sweep: 360
      }),
      ...(layout === 'grid' && {
        rows: Math.ceil(Math.sqrt(brainData?.nodes.length || 1)),
        cols: Math.ceil(Math.sqrt(brainData?.nodes.length || 1))
      })
    } as any

    cy.layout(layoutOptions).run()

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è layout
    setTimeout(() => {
      applyEdgeStyles(cy)
    }, 1100) // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä Cytoscape –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    if (cyInstanceRef.current && brainData) {
      const cy = cyInstanceRef.current
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
      setTimeout(() => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
          const container = cy.container()
          if (container && container.offsetWidth > 0 && container.offsetHeight > 0) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
            cy.resize()

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            cy.elements().forEach(ele => {
              ele.position('x', ele.position('x'))
              ele.position('y', ele.position('y'))
            })

            // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            cy.fit()
            cy.center()

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π layout –∑–∞–Ω–æ–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            if (cy.elements().length > 0) {
              const layoutOptions = {
                name: layout,
                ...(layout === 'concentric' && {
                  concentric: function(node: any) {
                    return node.degree()
                  },
                  levelWidth: function(nodes: any) {
                    return 2
                  },
                  animate: true,
                  animationDuration: 500
                }),
                ...(layout === 'circle' && {
                  radius: 200,
                  startAngle: 0,
                  sweep: 360
                }),
                ...(layout === 'grid' && {
                  rows: Math.ceil(Math.sqrt(brainData.nodes.length)),
                  cols: Math.ceil(Math.sqrt(brainData.nodes.length))
                })
              } as any

              cy.layout(layoutOptions).run()
            }

            console.log('‚úÖ Cytoscape —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
          } else {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Cytoscape –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
          }
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ Cytoscape:', err)
          // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          try {
            cy.fit()
            cy.center()
          } catch (recoveryErr) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Cytoscape:', recoveryErr)
          }
        }
      }, 200) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 200ms
    }
  }, [showStats, layout, brainData])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      if (cyInstanceRef.current) {
        const cy = cyInstanceRef.current
        setTimeout(() => {
          try {
            cy.resize()
            cy.fit()
            cy.center()
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞:', err)
          }
        }, 100)
      }
    }

    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ —Å–≤—è–∑–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (cyInstanceRef.current) {
      const cy = cyInstanceRef.current
      setTimeout(() => {
        applyEdgeStyles(cy)
      }, 100)
    }
  }, [showWeights]) // showWeights –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª–µ–π

  // –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞
  const exportGraph = (format: 'png' | 'json' = 'png') => {
    if (!cyInstanceRef.current) return

    const cy = cyInstanceRef.current

    if (format === 'png') {
      const png = cy.png({
        full: true,
        output: 'blob'
      })

      const url = URL.createObjectURL(png)
      const a = document.createElement('a')
      a.href = url
      a.download = `brain-${brainId}-${layout}.png`
      a.click()
      URL.revokeObjectURL(url)
    } else if (format === 'json') {
      const json = cy.json()
      const dataStr = JSON.stringify(json, null, 2)
      const dataBlob = new Blob([dataStr], { type: 'application/json' })

      const url = URL.createObjectURL(dataBlob)
      const a = document.createElement('a')
      a.href = url
      a.download = `brain-${brainId}-${layout}.json`
      a.click()
      URL.revokeObjectURL(url)
    }
  }

  // –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥—É
  const resetView = () => {
    if (!cyInstanceRef.current) return

    const cy = cyInstanceRef.current
    cy.fit()
    cy.center()
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
  const forceResize = () => {
    if (!cyInstanceRef.current) return

    const cy = cyInstanceRef.current
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
      const container = cy.container()
      if (container && container.offsetWidth > 0 && container.offsetHeight > 0) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        cy.resize()

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cy.elements().forEach(ele => {
          ele.position('x', ele.position('x'))
          ele.position('y', ele.position('y'))
        })

        // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        cy.fit()
        cy.center()

        console.log('‚úÖ –†–∞–∑–º–µ—Ä—ã Cytoscape –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      } else {
        console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Cytoscape –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        cy.fit()
        cy.center()
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤:', err)
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      try {
        cy.fit()
        cy.center()
      } catch (recoveryErr) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Cytoscape:', recoveryErr)
      }
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
  const forceStyleUpdate = () => {
    if (!cyInstanceRef.current) {
      console.log('‚ùå cyInstanceRef.current –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      return
    }

    const cy = cyInstanceRef.current
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      cy.elements('edge').forEach(ele => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ —Å–≤—è–∑–µ–π
        const weight = ele.data('weight') as number
        const enabled = ele.data('enabled') as boolean

        let color: string
        if (!enabled) {
          color = '#d1d5db'
        } else if (weight > 0.7) {
          color = '#059669'
        } else if (weight > 0.3) {
          color = '#10b981'
        } else if (weight > 0) {
          color = '#34d399'
        } else if (weight < -0.7) {
          color = '#dc2626'
        } else if (weight < -0.3) {
          color = '#ef4444'
        } else if (weight < 0) {
          color = '#f87171'
        } else {
          color = '#6b7280'
        }

        ele.style('line-color', color)
        ele.style('target-arrow-color', color)
      })

      console.log('‚úÖ –°—Ç–∏–ª–∏ Cytoscape –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π:', err)
    }
  }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∫ —Å–≤—è–∑—è–º
  const applyEdgeStyles = (cy: cytoscape.Core) => {
    const edgeCount = cy.elements('edge').length
    console.log('üé® –ü—Ä–∏–º–µ–Ω—è—é —Å—Ç–∏–ª–∏ –∫ —Å–≤—è–∑—è–º. –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π:', edgeCount)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('üîç –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Cytoscape:', cy.elements().length)
    console.log('üîç –£–∑–ª—ã:', cy.elements('node').length)
    console.log('üîç –°–≤—è–∑–∏:', cy.elements('edge').length)
    console.log('üîç –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', cy.elements().map(ele => ele.isNode() ? 'node' : 'edge'))

    if (edgeCount === 0) {
      console.warn('‚ö†Ô∏è –°–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π')

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å DOM
      cy.elements().forEach(ele => {
        ele.position('x', ele.position('x'))
        ele.position('y', ele.position('y'))
      })

      const retryEdgeCount = cy.elements('edge').length
      console.log('üîç –°–≤—è–∑–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM:', retryEdgeCount)

      if (retryEdgeCount === 0) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        cy.elements().forEach(ele => {
          if (ele.isEdge()) {
            ele.style('line-color', ele.style('line-color'))
            ele.style('target-arrow-color', ele.style('target-arrow-color'))
          }
        })

        const finalRetryCount = cy.elements('edge').length
        console.log('üîç –°–≤—è–∑–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π:', finalRetryCount)

        if (finalRetryCount === 0) {
          return
        }
      }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏
    cy.elements('edge').forEach((edge) => {
      applyEdgeStyle(edge)
    })
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è –∫ –æ–¥–Ω–æ–π —Å–≤—è–∑–∏
  const applyEdgeStyle = (edge: cytoscape.EdgeSingular) => {
    const weight = edge.data('weight') as number
    const enabled = edge.data('enabled') as boolean

    let color: string
    if (!enabled) {
      color = '#d1d5db' // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
    } else if (weight > 0.7) {
      color = '#059669' // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö
    } else if (weight > 0.3) {
      color = '#10b981' // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö
    } else if (weight > 0) {
      color = '#34d399' // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–ª–∞–±—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö
    } else if (weight < -0.7) {
      color = '#dc2626' // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
    } else if (weight < -0.3) {
      color = '#ef4444' // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
    } else if (weight < 0) {
      color = '#f87171' // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–ª–∞–±—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
    } else {
      color = '#6b7280' // –°–µ—Ä—ã–π –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
    try {
      edge.style('line-color', color)
      edge.style('target-arrow-color', color)

      // –°—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (Cytoscape –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç RGB, –∞ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º HEX - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è –∫ —Å–≤—è–∑–∏ ${edge.data('id')}:`, err)
    }
  }

  if (loading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-brain-600 mx-auto"></div>
          <p className="mt-4 text-center text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–∑–≥–∞...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md">
          <div className="text-red-600 text-center mb-4">
            <Brain className="h-12 w-12 mx-auto" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <div className="flex space-x-3">
            <button
              onClick={() => window.location.reload()}
              className="btn-primary flex-1"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            {onClose && (
              <button
                onClick={onClose}
                className="btn-secondary flex-1"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            )}
          </div>
        </div>
      </div>
    )
  }

  const brainStats = calculateBrainStats()

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-[95vw] h-[95vh] flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b">
          <div className="flex items-center space-x-3">
            <Brain className="h-6 w-6 text-brain-600" />
            <div>
              <h2 className="text-lg font-semibold text-gray-900">
                –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∑–≥–∞ #{brainId}
              </h2>
              <p className="text-sm text-gray-600">
                GP: {brainData?.gp.toFixed(3)} | Fitness: {brainData?.fitness.toFixed(3)} | Age: {brainData?.age}
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑—è—Ö */}
            {brainData && brainData.connections.length > 0 && brainData.connections.every(c => !c.enabled) && (
              <div className="text-xs text-orange-600 bg-orange-100 px-2 py-1 rounded border border-orange-300">
                ‚ö†Ô∏è –í—Å–µ —Å–≤—è–∑–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
              </div>
            )}

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ layout */}
            <select
              value={layout}
              onChange={(e) => setLayout(e.target.value as any)}
              className="input-field text-sm"
            >
              <option value="concentric">–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–π</option>
              <option value="circle">–ö—Ä—É–≥</option>
              <option value="grid">–°–µ—Ç–∫–∞</option>
              <option value="random">–°–ª—É—á–∞–π–Ω—ã–π</option>
            </select>

            <button
              onClick={applyLayout}
              className="btn-secondary p-2"
              title="–ü—Ä–∏–º–µ–Ω–∏—Ç—å layout"
            >
              <RotateCcw className="h-4 w-4" />
            </button>

            {/* –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤–µ—Å–∞ */}
            <button
              onClick={() => setShowWeights(!showWeights)}
              className={`btn-secondary p-2 ${showWeights ? 'bg-brain-100 text-brain-800' : ''}`}
              title="–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å–∞ —Å–≤—è–∑–µ–π"
            >
              <Eye className="h-4 w-4" />
            </button>

            {/* –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏ */}
            <button
              onClick={() => setShowDisabledConnections(!showDisabledConnections)}
              className={`btn-secondary p-2 ${showDisabledConnections ? 'bg-brain-100 text-brain-800' : ''}`}
              title="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏"
            >
              <Activity className="h-4 w-4" />
            </button>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤—è–∑–µ–π */}
            {brainData && (
              <div className="text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded">
                –°–≤—è–∑–∏: {brainData.connections.filter(c => c.enabled).length}/{brainData.connections.length}
              </div>
            )}

            {/* –†–∞–∑–º–µ—Ä —É–∑–ª–æ–≤ */}
            <select
              value={nodeSize}
              onChange={(e) => setNodeSize(Number(e.target.value))}
              className="input-field text-sm w-20"
            >
              <option value={20}>20</option>
              <option value={30}>30</option>
              <option value={40}>40</option>
              <option value={50}>50</option>
            </select>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <button
              onClick={() => setShowStats(!showStats)}
              className={`btn-secondary p-2 ${showStats ? 'bg-brain-100 text-brain-800' : ''}`}
              title="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            >
              <BarChart3 className="h-4 w-4" />
            </button>

            {/* –õ–µ–≥–µ–Ω–¥–∞ */}
            <button
              onClick={() => setShowLegend(!showLegend)}
              className={`btn-secondary p-2 ${showLegend ? 'bg-brain-100 text-brain-800' : ''}`}
              title="–ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–≥–µ–Ω–¥—É"
            >
              <Info className="h-4 w-4" />
            </button>

            {/* –≠–∫—Å–ø–æ—Ä—Ç */}
            <button
              onClick={() => exportGraph()}
              className="btn-secondary p-2"
              title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ (PNG)"
            >
              <Download className="h-4 w-4" />
            </button>

            {/* –≠–∫—Å–ø–æ—Ä—Ç JSON */}
            <button
              onClick={() => exportGraph('json')}
              className="btn-secondary p-2"
              title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ (JSON)"
            >
              <Settings className="h-4 w-4" />
            </button>

            {/* –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥—É */}
            <button
              onClick={resetView}
              className="btn-secondary p-2"
              title="–°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥"
            >
              <RotateCcw className="h-4 w-4" />
            </button>

            {/* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ */}
            <button
              onClick={forceResize}
              className="btn-secondary p-2"
              title="–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã"
            >
              <Activity className="h-4 w-4" />
            </button>

            {/* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π */}
            <button
              onClick={forceStyleUpdate}
              className="btn-secondary p-2"
              title="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–∏"
            >
              <RotateCcw className="h-4 w-4" />
            </button>

            {/* –ó–∞–∫—Ä—ã—Ç—å */}
            {onClose && (
              <button
                onClick={onClose}
                className="btn-secondary p-2"
                title="–ó–∞–∫—Ä—ã—Ç—å"
              >
                √ó
              </button>
            )}
          </div>
        </div>

        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        {showLegend && (
          <div className="px-4 py-2 bg-gray-50 border-b">
            <div className="grid grid-cols-3 gap-4 text-xs">
              {/* –¢–∏–ø—ã —É–∑–ª–æ–≤ */}
              <div>
                <h4 className="font-medium text-gray-800 mb-2 text-sm">–£–∑–ª—ã:</h4>
                <div className="space-y-1">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-blue-500 rounded-full border border-blue-700"></div>
                    <span>–í—Ö–æ–¥–Ω—ã–µ</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-orange-500 rounded-full border border-orange-700"></div>
                    <span>–°–∫—Ä—ã—Ç—ã–µ</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full border border-green-700"></div>
                    <span>–í—ã—Ö–æ–¥–Ω—ã–µ</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-purple-500 rounded-full border border-purple-700"></div>
                    <span>–ü–∞–º—è—Ç—å</span>
                  </div>
                </div>
              </div>

              {/* –¢–∏–ø—ã —Å–≤—è–∑–µ–π - –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü */}
              <div>
                <h4 className="font-medium text-gray-800 mb-2 text-sm">–°–≤—è–∑–∏ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ):</h4>
                <div className="space-y-1">
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-green-800 rounded"></div>
                    <span>&gt;0.7 (—Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π)</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-green-500 rounded"></div>
                    <span>0.3-0.7 (–∑–µ–ª–µ–Ω—ã–π)</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-green-300 rounded"></div>
                    <span>0-0.3 (—Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π)</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-gray-300 border border-dashed border-gray-500 rounded"></div>
                    <span>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (—Å–µ—Ä—ã–π)</span>
                  </div>
                </div>
              </div>

              {/* –¢–∏–ø—ã —Å–≤—è–∑–µ–π - –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü */}
              <div>
                <h4 className="font-medium text-gray-800 mb-2 text-sm">–°–≤—è–∑–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ):</h4>
                <div className="space-y-1">
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-red-800 rounded"></div>
                    <span>&lt;-0.7 (—Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π)</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-red-500 rounded"></div>
                    <span>-0.7--0.3 (–∫—Ä–∞—Å–Ω—ã–π)</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-red-300 rounded"></div>
                    <span>-0.3-0 (—Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π)</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-1.5 bg-gray-400 rounded"></div>
                    <span>–ù—É–ª–µ–≤—ã–µ (=0)</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="flex-1 flex">
          {/* –ì—Ä–∞—Ñ */}
          <div className={`p-4 ${showStats ? 'flex-1' : 'w-full'}`}>
            <div
              ref={cyRef}
              className="w-full h-full border border-gray-200 rounded-lg bg-gray-50"
              style={{ minHeight: '500px' }}
            />
          </div>

          {/* –ü–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞ */}
          {showStats && (
            <div className="w-80 border-l bg-gray-50 p-4 overflow-y-auto">
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∑–≥–∞ */}
              {brainStats && (
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                    <BarChart3 className="h-5 w-5 mr-2" />
                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∑–≥–∞
                  </h3>

                  {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                  <div className="bg-white p-3 rounded border mb-4">
                    <h4 className="font-medium text-gray-800 mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">ID –º–æ–∑–≥–∞:</span>
                        <span className="font-medium">#{brainId}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">GP:</span>
                        <span className="font-medium text-blue-600">{brainData?.gp.toFixed(3)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Fitness:</span>
                        <span className="font-medium text-green-600">{brainData?.fitness.toFixed(3)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">–í–æ–∑—Ä–∞—Å—Ç:</span>
                        <span className="font-medium text-orange-600">{brainData?.age}</span>
                      </div>
                    </div>
                  </div>

                  {/* –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">–í—Å–µ–≥–æ —É–∑–ª–æ–≤:</span>
                      <span className="font-medium">{brainStats.totalNodes}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π:</span>
                      <span className="font-medium">{brainStats.totalConnections}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∏:</span>
                      <span className="font-medium">{(brainStats.networkDensity * 100).toFixed(1)}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å:</span>
                      <span className="font-medium">{brainStats.avgWeight.toFixed(3)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">–°—Ç–¥. –≤–µ—Å:</span>
                      <span className="font-medium">{brainStats.weightStd.toFixed(3)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">–°—Ä–µ–¥–Ω—è—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å:</span>
                      <span className="font-medium">{brainStats.avgPlasticity.toFixed(3)}</span>
                    </div>
                  </div>

                  {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º */}
                  <div className="mt-4">
                    <h4 className="font-medium text-gray-800 mb-2">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤:</h4>
                    <div className="space-y-1">
                      {Object.entries(brainStats.nodeTypes).map(([type, count]) => (
                        <div key={type} className="flex justify-between text-sm">
                          <span className="text-gray-600 capitalize">{type}:</span>
                          <span className="font-medium">{count}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* –§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ */}
                  <div className="mt-4">
                    <h4 className="font-medium text-gray-800 mb-2">–§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</h4>
                    <div className="space-y-1">
                      {brainData && Object.entries(
                        brainData.nodes.reduce((acc, node) => {
                          acc[node.activation] = (acc[node.activation] || 0) + 1
                          return acc
                        }, {} as Record<string, number>)
                      ).map(([activation, count]) => (
                        <div key={activation} className="flex justify-between text-sm">
                          <span className="text-gray-600">{activation}:</span>
                          <span className="font-medium">{count}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π */}
                  <div className="mt-4">
                    <h4 className="font-medium text-gray-800 mb-2">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π:</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">–í–æ–∑–±—É–∂–¥–∞—é—â–∏–µ:</span>
                        <span className="font-medium text-green-600">{brainStats.positiveConnections}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">–¢–æ—Ä–º–æ–∑—è—â–∏–µ:</span>
                        <span className="font-medium text-red-600">{brainStats.negativeConnections}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">–°–∏–ª—å–Ω—ã–µ (|w|&gt;0.5):</span>
                        <span className="font-medium">{brainStats.strongConnections}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ:</span>
                        <span className="font-medium text-gray-500">{brainData?.connections.filter(c => !c.enabled).length || 0}</span>
                      </div>
                    </div>
                  </div>

                  {/* –î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
                  <div className="mt-4">
                    <h4 className="font-medium text-gray-800 mb-2">–î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</h4>
                    <div className="space-y-1 text-sm">
                      {brainData && (() => {
                        const biases = brainData.nodes.map(n => n.bias)
                        const thresholds = brainData.nodes.map(n => n.threshold)
                        const minBias = Math.min(...biases)
                        const maxBias = Math.max(...biases)
                        const minThreshold = Math.min(...thresholds)
                        const maxThreshold = Math.max(...thresholds)

                        return (
                          <>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Bias:</span>
                              <span className="font-medium">[{minBias.toFixed(2)}, {maxBias.toFixed(2)}]</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Threshold:</span>
                              <span className="font-medium">[{minThreshold.toFixed(2)}, {maxThreshold.toFixed(2)}]</span>
                            </div>
                          </>
                        )
                      })()}
                    </div>
                  </div>
                </div>
              )}

              {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ */}
              {selectedElement && (
                <div className="border-t pt-4">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                    <Info className="h-5 w-5 mr-2" />
                    {selectedElement.type === 'node' ? '–î–µ—Ç–∞–ª–∏ —É–∑–ª–∞' : '–î–µ—Ç–∞–ª–∏ —Å–≤—è–∑–∏'}
                  </h3>
                  <div className="bg-white p-3 rounded border">
                    {selectedElement.type === 'node' ? (
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">ID:</span>
                          <span className="font-medium">{selectedElement.data.id}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–¢–∏–ø:</span>
                          <span className="font-medium capitalize">{selectedElement.data.type}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–ê–∫—Ç–∏–≤–∞—Ü–∏—è:</span>
                          <span className="font-medium">{selectedElement.data.activation}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Bias:</span>
                          <span className="font-medium">{selectedElement.data.bias.toFixed(3)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Threshold:</span>
                          <span className="font-medium">{selectedElement.data.threshold.toFixed(3)}</span>
                        </div>
                      </div>
                    ) : (
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">ID:</span>
                          <span className="font-medium">{selectedElement.data.id}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–û—Ç:</span>
                          <span className="font-medium">{selectedElement.data.source}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–ö:</span>
                          <span className="font-medium">{selectedElement.data.target}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–í–µ—Å:</span>
                          <span className={`font-medium ${selectedElement.data.weight > 0 ? 'text-green-600' : 'text-red-600'}`}>
                            {selectedElement.data.weight.toFixed(3)}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–ü–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å:</span>
                          <span className="font-medium">{selectedElement.data.plasticity.toFixed(3)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–°—Ç–∞—Ç—É—Å:</span>
                          <span className={`font-medium ${selectedElement.data.enabled ? 'text-green-600' : 'text-gray-500'}`}>
                            {selectedElement.data.enabled ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                          </span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
              <div className="border-t pt-4 mt-4">
                <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                  <Activity className="h-5 w-5 mr-2" />
                  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                </h3>
                <div className="text-sm text-gray-600 space-y-2">
                  <p>‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –∏–ª–∏ —Å–≤—è–∑—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</p>
                  <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—ã—à—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</p>
                  <p>‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ layout –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞</p>
                  <p>‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Å–æ–≤</p>
                  <p>‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ/—Å–∫—Ä–æ–π—Ç–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏</p>
                  <p>‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ/—Å–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>
                  <p>‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ/—Å–∫—Ä–æ–π—Ç–µ –ª–µ–≥–µ–Ω–¥—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞</p>
                  <p>‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ –≤ PNG –∏–ª–∏ JSON</p>
                  <p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä —É–∑–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏</p>
                  <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–∏" –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤</p>
                  <p>‚Ä¢ –¶–≤–µ—Ç–∞ —Å–≤—è–∑–µ–π –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–µ—Å–∞: –∑–µ–ª–µ–Ω—ã–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ), –∫—Ä–∞—Å–Ω—ã–µ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)</p>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É */}
        <div className="px-4 py-2 bg-gray-50 border-t">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>
              –£–∑–ª–æ–≤: {brainData?.nodes.length} |
              –°–≤—è–∑–µ–π: {brainData?.connections.filter(c => c.enabled).length} |
              {showDisabledConnections && `–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${brainData?.connections.filter(c => !c.enabled).length || 0} | `}
              Layout: {layout} |
              {brainStats && `–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: ${(brainStats.networkDensity * 100).toFixed(1)}%`}
            </span>
            <button
              onClick={resetView}
              className="text-brain-600 hover:text-brain-800"
            >
              –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default BrainVisualizer
