import React, { useEffect, useRef, useState } from 'react'
import cytoscape from 'cytoscape'
import { Brain, Eye, Settings, Download, RotateCcw } from 'lucide-react'

interface BrainNode {
  id: number
  type: 'input' | 'output' | 'hidden' | 'memory'
  activation: string
  bias: number
  threshold: number
}

interface BrainConnection {
  id: number
  from: number
  to: number
  weight: number
  plasticity: number
  enabled: boolean
}

interface BrainVisualizerProps {
  brainId: number
  onClose?: () => void
}

const BrainVisualizer = ({ brainId, onClose }: BrainVisualizerProps) => {
  const cyRef = useRef<HTMLDivElement>(null)
  const cyInstanceRef = useRef<cytoscape.Core | null>(null)
  const [brainData, setBrainData] = useState<{
    nodes: BrainNode[]
    connections: BrainConnection[]
    gp: number
    fitness: number
    age: number
  } | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [layout, setLayout] = useState<'grid' | 'circle' | 'random' | 'cola'>('cola')
  const [showWeights, setShowWeights] = useState(true)
  const [nodeSize, setNodeSize] = useState(30)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–∑–≥–µ
  useEffect(() => {
    const fetchBrainData = async () => {
      try {
        setLoading(true)
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–∑–≥–∞ #', brainId)
        
        const response = await fetch(`/api/population/${brainId}`)
        console.log('üì° API Response status:', response.status)
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`)
        }
        
        const data = await response.json()
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data)
        
        setBrainData(data)
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err)
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
      } finally {
        setLoading(false)
      }
    }

    fetchBrainData()
  }, [brainId])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cytoscape
  useEffect(() => {
    if (!cyRef.current || !brainData) {
      console.log('‚ö†Ô∏è –ù–µ –º–æ–≥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Cytoscape:', { 
        hasRef: !!cyRef.current, 
        hasData: !!brainData 
      })
      return
    }

    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Cytoscape —Å –¥–∞–Ω–Ω—ã–º–∏:', brainData)

    try {
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Cytoscape
      const elements = {
        nodes: brainData.nodes.map(node => ({
          data: {
            id: node.id.toString(),
            label: `${node.type.charAt(0).toUpperCase()}${node.id}`,
            type: node.type,
            activation: node.activation,
            bias: node.bias,
            threshold: node.threshold
          }
        })),
        edges: brainData.connections
          .filter(conn => conn.enabled)
          .map(conn => ({
            data: {
              id: conn.id.toString(),
              source: conn.from.toString(),
              target: conn.to.toString(),
              weight: conn.weight,
              plasticity: conn.plasticity,
              label: showWeights ? conn.weight.toFixed(2) : ''
            }
          }))
      }

      console.log('üîó –°–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', elements)

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Cytoscape
      const cy = cytoscape({
        container: cyRef.current,
        elements: elements,
        style: [
          // –°—Ç–∏–ª–∏ –¥–ª—è —É–∑–ª–æ–≤
          {
            selector: 'node',
            style: {
              'background-color': '#e5e7eb',
              'border-color': '#374151',
              'border-width': 2,
              'width': nodeSize,
              'height': nodeSize,
              'label': 'data(label)',
              'font-size': '10px',
              'font-weight': 'bold',
              'text-valign': 'center',
              'text-halign': 'center',
              'text-wrap': 'wrap',
              'text-max-width': nodeSize * 0.8
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —É–∑–ª–æ–≤
          {
            selector: 'node[type = "input"]',
            style: {
              'background-color': '#3b82f6',
              'border-color': '#1e40af',
              'color': 'white'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —É–∑–ª–æ–≤
          {
            selector: 'node[type = "output"]',
            style: {
              'background-color': '#10b981',
              'border-color': '#047857',
              'color': 'white'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —É–∑–ª–æ–≤
          {
            selector: 'node[type = "hidden"]',
            style: {
              'background-color': '#f59e0b',
              'border-color': '#d97706',
              'color': 'white'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è —É–∑–ª–æ–≤ –ø–∞–º—è—Ç–∏
          {
            selector: 'node[type = "memory"]',
            style: {
              'background-color': '#8b5cf6',
              'border-color': '#7c3aed',
              'color': 'white'
            }
          },
          // –°—Ç–∏–ª–∏ –¥–ª—è —Å–≤—è–∑–µ–π
          {
            selector: 'edge',
            style: {
              'width': 'data(weight)',
              'line-color': function(ele: any) {
                const weight = ele.data('weight')
                if (weight > 0.5) return '#10b981' // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö
                if (weight < -0.5) return '#ef4444' // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
                return '#6b7280' // –°–µ—Ä—ã–π –¥–ª—è —Å–ª–∞–±—ã—Ö
              },
              'target-arrow-color': function(ele: any) {
                const weight = ele.data('weight')
                if (weight > 0.5) return '#10b981'
                if (weight < -0.5) return '#ef4444'
                return '#6b7280'
              },
              'target-arrow-shape': 'triangle',
              'arrow-scale': 0.5,
              'curve-style': 'bezier',
              'label': 'data(label)',
              'font-size': '8px',
              'text-rotation': 'autorotate',
              'text-margin-y': '-10px'
            }
          }
        ],
        layout: {
          name: layout,
          ...(layout === 'cola' && {
            nodeSpacing: 50,
            edgeLength: 100,
            animate: true,
            randomize: false,
            maxSimulationTime: 1500
          }),
          ...(layout === 'circle' && {
            radius: 200,
            startAngle: 0,
            sweep: 360
          }),
          ...(layout === 'grid' && {
            rows: Math.ceil(Math.sqrt(brainData.nodes.length)),
            cols: Math.ceil(Math.sqrt(brainData.nodes.length))
          })
        }
      })

      console.log('‚úÖ Cytoscape –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
      cyInstanceRef.current = cy

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      cy.on('tap', 'node', function(evt) {
        const node = evt.target
        const data = node.data()
        console.log('üëÜ –£–∑–µ–ª:', data)
      })

      cy.on('tap', 'edge', function(evt) {
        const edge = evt.target
        const data = edge.data()
        console.log('üëÜ –°–≤—è–∑—å:', data)
      })

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
      cy.fit()
      cy.center()

      return () => {
        console.log('üßπ –£–Ω–∏—á—Ç–æ–∂–∞—é Cytoscape')
        cy.destroy()
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Cytoscape:', err)
      setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  }, [brainData, layout, showWeights, nodeSize])

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π layout
  const applyLayout = () => {
    if (!cyInstanceRef.current) return

    const cy = cyInstanceRef.current
    const layoutOptions = {
      name: layout,
      ...(layout === 'cola' && {
        nodeSpacing: 50,
        edgeLength: 100,
        animate: true,
        randomize: false,
        maxSimulationTime: 1500
      }),
      ...(layout === 'circle' && {
        radius: 200,
        startAngle: 0,
        sweep: 360
      }),
      ...(layout === 'grid' && {
        rows: Math.ceil(Math.sqrt(brainData?.nodes.length || 1)),
        cols: Math.ceil(Math.sqrt(brainData?.nodes.length || 1))
      })
    }

    cy.layout(layoutOptions).run()
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞
  const exportGraph = () => {
    if (!cyInstanceRef.current) return

    const cy = cyInstanceRef.current
    const png = cy.png({
      full: true,
      quality: 1,
      output: 'blob'
    })

    const url = URL.createObjectURL(png)
    const a = document.createElement('a')
    a.href = url
    a.download = `brain-${brainId}-${layout}.png`
    a.click()
    URL.revokeObjectURL(url)
  }

  // –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥—É
  const resetView = () => {
    if (!cyInstanceRef.current) return

    const cy = cyInstanceRef.current
    cy.fit()
    cy.center()
  }

  if (loading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-brain-600 mx-auto"></div>
          <p className="mt-4 text-center text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–∑–≥–∞...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md">
          <div className="text-red-600 text-center mb-4">
            <Brain className="h-12 w-12 mx-auto" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <div className="flex space-x-3">
            <button
              onClick={() => window.location.reload()}
              className="btn-primary flex-1"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            {onClose && (
              <button
                onClick={onClose}
                className="btn-secondary flex-1"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            )}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-[90vw] h-[90vh] flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b">
          <div className="flex items-center space-x-3">
            <Brain className="h-6 w-6 text-brain-600" />
            <div>
              <h2 className="text-lg font-semibold text-gray-900">
                –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∑–≥–∞ #{brainId}
              </h2>
              <p className="text-sm text-gray-600">
                GP: {brainData?.gp.toFixed(3)} | Fitness: {brainData?.fitness.toFixed(3)} | Age: {brainData?.age}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ layout */}
            <select
              value={layout}
              onChange={(e) => setLayout(e.target.value as any)}
              className="input-field text-sm"
            >
              <option value="cola">Cola (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)</option>
              <option value="circle">–ö—Ä—É–≥</option>
              <option value="grid">–°–µ—Ç–∫–∞</option>
              <option value="random">–°–ª—É—á–∞–π–Ω—ã–π</option>
            </select>
            
            <button
              onClick={applyLayout}
              className="btn-secondary p-2"
              title="–ü—Ä–∏–º–µ–Ω–∏—Ç—å layout"
            >
              <RotateCcw className="h-4 w-4" />
            </button>
            
            {/* –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤–µ—Å–∞ */}
            <button
              onClick={() => setShowWeights(!showWeights)}
              className={`btn-secondary p-2 ${showWeights ? 'bg-brain-100 text-brain-800' : ''}`}
              title="–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å–∞ —Å–≤—è–∑–µ–π"
            >
              <Eye className="h-4 w-4" />
            </button>
            
            {/* –†–∞–∑–º–µ—Ä —É–∑–ª–æ–≤ */}
            <select
              value={nodeSize}
              onChange={(e) => setNodeSize(Number(e.target.value))}
              className="input-field text-sm w-20"
            >
              <option value={20}>20</option>
              <option value={30}>30</option>
              <option value={40}>40</option>
              <option value={50}>50</option>
            </select>
            
            {/* –≠–∫—Å–ø–æ—Ä—Ç */}
            <button
              onClick={exportGraph}
              className="btn-secondary p-2"
              title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ"
            >
              <Download className="h-4 w-4" />
            </button>
            
            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <button className="btn-secondary p-2" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">
              <Settings className="h-4 w-4" />
            </button>
            
            {/* –ó–∞–∫—Ä—ã—Ç—å */}
            {onClose && (
              <button
                onClick={onClose}
                className="btn-secondary p-2"
                title="–ó–∞–∫—Ä—ã—Ç—å"
              >
                √ó
              </button>
            )}
          </div>
        </div>
        
        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        <div className="px-4 py-2 bg-gray-50 border-b">
          <div className="flex items-center space-x-6 text-sm">
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 bg-blue-500 rounded-full"></div>
              <span>–í—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 bg-orange-500 rounded-full"></div>
              <span>–°–∫—Ä—ã—Ç—ã–µ —É–∑–ª—ã</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 bg-green-500 rounded-full"></div>
              <span>–í—ã—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 bg-purple-500 rounded-full"></div>
              <span>–£–∑–ª—ã –ø–∞–º—è—Ç–∏</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 bg-green-500 rounded-full"></div>
              <span>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 bg-red-500 rounded-full"></div>
              <span>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏</span>
            </div>
          </div>
        </div>
        
        {/* –ì—Ä–∞—Ñ */}
        <div className="flex-1 p-4">
          <div
            ref={cyRef}
            className="w-full h-full border border-gray-200 rounded-lg bg-gray-50"
            style={{ minHeight: '500px' }}
          />
          {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="mt-2 text-xs text-gray-500">
            Debug: brainData={brainData ? 'loaded' : 'null'}, 
            nodes={brainData?.nodes.length || 0}, 
            connections={brainData?.connections.length || 0}
          </div>
        </div>
        
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="px-4 py-2 bg-gray-50 border-t">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>
              –£–∑–ª–æ–≤: {brainData?.nodes.length} | 
              –°–≤—è–∑–µ–π: {brainData?.connections.filter(c => c.enabled).length} | 
              Layout: {layout}
            </span>
            <button
              onClick={resetView}
              className="text-brain-600 hover:text-brain-800"
            >
              –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default BrainVisualizer 