"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Brainzzz API.
"""

import asyncio
import aiohttp


async def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints."""

    async with aiohttp.ClientSession() as session:
        base_url = "http://localhost:8000"

        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Brainzzz API...")

        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            async with session.get(f"{base_url}/") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {data['message']}")
                else:
                    print(f"‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

        # –¢–µ—Å—Ç health check
        try:
            async with session.get(f"{base_url}/api/v1/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Health check: {data['status']}")
                else:
                    print(f"‚ùå Health check: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")

        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        try:
            async with session.get(f"{base_url}/api/v1/status") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {data['status']}")
                    print(f"   Redis: {data['connections']['redis']}")
                    print(f"   DuckDB: {data['connections']['duckdb']}")
                else:
                    print(f"‚ùå –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")

        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏
        try:
            async with session.get(f"{base_url}/api/v1/population/stats") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏: {data['count']} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏: {e}")


if __name__ == "__main__":
    asyncio.run(test_api())
