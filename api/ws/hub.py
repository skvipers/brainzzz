"""
WebSocket —Ö–∞–± –¥–ª—è —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ Redis –≤ –±—Ä–∞—É–∑–µ—Ä.
"""

import asyncio
import logging
from datetime import datetime
from typing import Any, Dict, Set

from core.adapters import redis_adapter
from core.schemas import MessageType, WebSocketMessage
from core.settings import settings
from fastapi import WebSocket

logger = logging.getLogger(__name__)


class WebSocketHub:
    """–•–∞–± –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏."""

    def __init__(self, max_connections: int = None):
        self.active_connections: Set[WebSocket] = set()
        self.redis_callback_task = None
        self.max_connections = max_connections or settings.ws_max_connections

    async def connect(self, websocket: WebSocket):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞."""
        client_id = id(websocket)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if len(self.active_connections) >= self.max_connections:
            logger.warning(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.max_connections}"
            )
            await websocket.close(code=1013, reason="Too many connections")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
        await asyncio.sleep(1.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã

        try:
            await websocket.accept()
            self.active_connections.add(websocket)
            logger.info(
                f"‚úÖ WebSocket #{client_id} –ø–æ–¥–∫–ª—é—á–µ–Ω. "
                f"–í—Å–µ–≥–æ: {len(self.active_connections)}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = WebSocketMessage(
                type=MessageType.SYSTEM_STATUS,
                data={
                    "status": "connected",
                    "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Brainzzz!",
                    "timestamp": datetime.now().isoformat(),
                },
            )
            await self.send_personal_message(websocket, welcome_msg)
            logger.info(
                f"üì§ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket #{client_id}"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket #{client_id}: {e}")
            if websocket in self.active_connections:
                self.active_connections.remove(websocket)
            try:
                await websocket.close(code=1011, reason="Internal error")
            except Exception:
                pass

    def disconnect(self, websocket: WebSocket):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket –∫–ª–∏–µ–Ω—Ç–∞."""
        client_id = id(websocket)
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
            logger.info(
                f"üîå WebSocket #{client_id} –æ—Ç–∫–ª—é—á–µ–Ω. "
                f"–í—Å–µ–≥–æ: {len(self.active_connections)}"
            )
        else:
            logger.debug(f"üîå WebSocket #{client_id} —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω")

    async def send_personal_message(
        self, websocket: WebSocket, message: WebSocketMessage
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É."""
        try:
            await websocket.send_text(message.json())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.disconnect(websocket)

    async def broadcast(self, message: WebSocketMessage):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º."""
        if not self.active_connections:
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        connections = self.active_connections.copy()

        for connection in connections:
            try:
                await connection.send_text(message.json())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ broadcast: {e}")
                self.disconnect(connection)

    async def start_redis_listener(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è Redis —Å–æ–±—ã—Ç–∏–π."""
        if self.redis_callback_task:
            return

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
            await redis_adapter.connect()

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            success = await redis_adapter.subscribe_to_events(self._handle_redis_event)
            if success:
                logger.info("‚úÖ Redis listener –∑–∞–ø—É—â–µ–Ω")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis listener")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Redis listener: {e}")

    async def stop_redis_listener(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è Redis —Å–æ–±—ã—Ç–∏–π."""
        if self.redis_callback_task:
            self.redis_callback_task.cancel()
            self.redis_callback_task = None

        await redis_adapter.disconnect()
        logger.info("Redis listener –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _handle_redis_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ Redis."""
        try:
            # –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = WebSocketMessage(
                type=event.get("type", "unknown"),
                data=event.get("data", {}),
                ts=datetime.now(),
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            await self.broadcast(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Redis —Å–æ–±—ã—Ç–∏—è: {e}")

    async def cleanup_dead_connections(self):
        """–û—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        dead_connections = set()

        for connection in self.active_connections:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –∂–∏–≤–æ
                await connection.ping()
            except Exception:
                dead_connections.add(connection)

        # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for dead_connection in dead_connections:
            self.disconnect(dead_connection)

        if dead_connections:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(dead_connections)} –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

    def get_connection_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        return {
            "total_connections": len(self.active_connections),
            "max_connections": self.max_connections,
            "available_connections": self.max_connections
            - len(self.active_connections),
            "can_accept": len(self.active_connections) < self.max_connections,
        }

    def __repr__(self):
        return (
            f"WebSocketHub(connections={len(self.active_connections)}/"
            f"{self.max_connections})"
        )
