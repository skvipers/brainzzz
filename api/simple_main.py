"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import logging

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üß† Brainzzz API (Simple)",
    description="–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    version="1.0.0",
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ endpoints


@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    return {
        "message": "üß† Brainzzz API (Simple)",
        "version": "1.0.0",
        "status": "working",
    }


@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API."""
    return {
        "status": "healthy",
        "timestamp": "2025-01-18T00:00:00Z",
        "version": "1.0.0",
    }


@app.get("/api/population")
async def get_population(limit: int = 10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ (mock –¥–∞–Ω–Ω—ã–µ)."""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å –ª–∏–º–∏—Ç–æ–º: {limit}")
    mock_population = []
    for i in range(1, min(limit + 1, 21)):  # –ú–∞–∫—Å–∏–º—É–º 20 –º–æ–∑–≥–æ–≤
        mock_population.append(
            {
                "id": i,
                "nodes": 7 + (i % 5),  # 7-11 —É–∑–ª–æ–≤
                "connections": 8 + (i % 7),  # 8-14 —Å–≤—è–∑–µ–π
                "gp": 3.5 + (i * 0.1),  # GP –æ—Ç 3.6 –¥–æ 5.5
                "fitness": 0.3 + (i * 0.01),  # Fitness –æ—Ç 0.31 –¥–æ 0.5
                "age": 1 + (i % 3),  # Age –æ—Ç 1 –¥–æ 3
            }
        )
    logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(mock_population)} –º–æ–∑–≥–æ–≤")
    return mock_population


@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (mock –¥–∞–Ω–Ω—ã–µ)."""
    logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏")
    return {
        "size": 20,
        "avg_fitness": 0.390,
        "max_fitness": 0.454,
        "avg_nodes": 8.0,
        "avg_connections": 10.0,
        "generation": 1,
    }


@app.post("/api/evolve")
async def start_evolution(data: dict):
    """–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ (mock)."""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {data}")
    return {
        "message": "–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (mock)",
        "status": "success",
        "mutation_rate": data.get("mutation_rate", 0.3),
        "population_size": data.get("population_size", 20),
    }


@app.get("/api/population/{brain_id}")
async def get_brain(brain_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞."""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–∑–≥–∞ #{brain_id}")

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º brain_id
    if brain_id <= 0 or brain_id > 20:
        return {"error": "ID –º–æ–∑–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 20"}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–≤–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    node_count = 7 + (brain_id % 5)  # 7-11 —É–∑–ª–æ–≤ (–∫–∞–∫ –≤ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    connection_count = 8 + (brain_id % 7)  # 8-14 —Å–≤—è–∑–µ–π (–∫–∞–∫ –≤ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

    # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã
    nodes = []
    for i in range(1, node_count + 1):
        if i == 1:
            node_type = "input"
        elif i == node_count:
            node_type = "output"
        else:
            node_type = "hidden"

        nodes.append(
            {
                "id": i,
                "type": node_type,
                "activation": "sigmoid",
                "bias": round(0.1 + (i * 0.05), 2),
                "threshold": round(0.3 + (i * 0.1), 2),
            }
        )

    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ (—Å–æ–µ–¥–∏–Ω—è–µ–º —É–∑–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
    connections = []
    for i in range(1, connection_count + 1):
        if i < node_count:  # –°–≤—è–∑—å –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É–∑–ª–∞–º–∏
            connections.append(
                {
                    "id": i,
                    "from": i,
                    "to": i + 1,
                    "weight": round(-0.8 + (i * 0.3), 2),
                    "plasticity": 0.1,
                    "enabled": True,
                }
            )
        else:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–ª—É—á–∞–π–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
            from_node = (i % node_count) + 1
            to_node = ((i + 1) % node_count) + 1
            if from_node != to_node:
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∑–≥–∏ –∏–º–µ—é—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                # –ú–æ–∑–≥–∏ 3, 7, 11, 15, 19 –∏–º–µ—é—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏
                is_disabled = (
                    brain_id in [3, 7, 11, 15, 19] and i > connection_count - 2
                )
                connections.append(
                    {
                        "id": i,
                        "from": from_node,
                        "to": to_node,
                        "weight": round(-0.5 + (i * 0.2), 2),
                        "plasticity": 0.1,
                        "enabled": not is_disabled,
                    }
                )

    mock_brain = {
        "id": brain_id,
        "nodes": nodes,
        "connections": connections,
        "gp": 3.5 + (brain_id * 0.1),  # GP –æ—Ç 3.6 –¥–æ 5.5
        "fitness": 0.3 + (brain_id * 0.01),  # Fitness –æ—Ç 0.31 –¥–æ 0.5
        "age": 1 + (brain_id % 3),  # Age –æ—Ç 1 –¥–æ 3
    }

    logger.info(
        f"–£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–∑–≥–∞ #{brain_id}: "
        f"{len(mock_brain['nodes'])} —É–∑–ª–æ–≤, {len(mock_brain['connections'])} —Å–≤—è–∑–µ–π"
    )
    return mock_brain


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
