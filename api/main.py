"""
–û—Å–Ω–æ–≤–Ω–æ–π FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Brainzzz API.
"""

import asyncio
import logging
from typing import Optional

from core.adapters import redis_adapter
from core.settings import settings
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from ws.hub import WebSocketHub

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üß† Brainzzz API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π —ç–≤–æ–ª—é—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π",
    version="1.0.0",
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# WebSocket —Ö–∞–±
websocket_hub = WebSocketHub()


# Startup –∏ shutdown —Å–æ–±—ã—Ç–∏—è
@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üöÄ Brainzzz API –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"WebSocket –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {websocket_hub.max_connections}")


@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üõë Brainzzz API –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await websocket_hub.stop_redis_listener()
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for websocket in list(websocket_hub.active_connections):
        try:
            await websocket.close(code=1001, reason="Server shutdown")
        except Exception:
            pass
    websocket_hub.active_connections.clear()
    logger.info("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏
POPULATION_SIZE = 20

# –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ endpoints


@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    return {"message": "üß† Brainzzz API", "version": "1.0.0", "status": "working"}


@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API."""
    return {
        "status": "healthy",
        "timestamp": "2025-01-18T00:00:00Z",
        "version": "1.0.0",
    }


@app.get("/api/population")
async def get_population(limit: Optional[int] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ (mock –¥–∞–Ω–Ω—ã–µ)."""
    # –ï—Å–ª–∏ limit –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
    if limit is None:
        limit = POPULATION_SIZE

    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å –ª–∏–º–∏—Ç–æ–º: {limit}")
    mock_population = []

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∑–≥–∏ –æ—Ç 1 –¥–æ POPULATION_SIZE
    for i in range(1, POPULATION_SIZE + 1):
        mock_population.append(
            {
                "id": i,
                "nodes": 7 + (i % 5),  # 7-11 —É–∑–ª–æ–≤
                "connections": 8 + (i % 7),  # 8-14 —Å–≤—è–∑–µ–π
                "gp": 3.5 + (i * 0.1),  # GP –æ—Ç 3.6 –¥–æ 5.5
                "fitness": 0.3 + (i * 0.01),  # Fitness –æ—Ç 0.31 –¥–æ 0.5
                "age": 1 + (i % 3),  # Age –æ—Ç 1 –¥–æ 3
            }
        )

    logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(mock_population)} –º–æ–∑–≥–æ–≤")
    return mock_population


@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (mock –¥–∞–Ω–Ω—ã—Ö)."""
    logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏")
    return {
        "size": POPULATION_SIZE,
        "avg_fitness": 0.390,
        "max_fitness": 0.454,
        "avg_nodes": 8.0,
        "avg_connections": 10.0,
        "generation": 1,
    }


@app.get("/api/ws/stats")
async def get_websocket_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    return websocket_hub.get_connection_stats()


@app.get("/api/ws/status")
async def get_websocket_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞."""
    return {
        "status": "available",
        "max_connections": websocket_hub.max_connections,
        "active_connections": len(websocket_hub.active_connections),
        "available_connections": websocket_hub.max_connections
        - len(websocket_hub.active_connections),
        "can_accept": len(websocket_hub.active_connections)
        < websocket_hub.max_connections,
    }


@app.get("/api/ws/test")
async def test_websocket_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    import websockets

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
        uri = "ws://localhost:8000/ws"
        async with websockets.connect(uri) as websocket:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await websocket.send("test")
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = await websocket.recv()
            await websocket.close()

            return {
                "status": "success",
                "message": "WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "response": response,
            }
    except Exception as e:
        return {
            "status": "error",
            "message": f"WebSocket –æ—à–∏–±–∫–∞: {str(e)}",
            "error_type": type(e).__name__,
        }


@app.post("/api/ws/cleanup")
async def cleanup_websocket_connections():
    """–û—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    await websocket_hub.cleanup_dead_connections()
    return {
        "status": "success",
        "message": "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        "stats": websocket_hub.get_connection_stats(),
    }


@app.post("/api/ws/reset")
async def reset_all_websocket_connections():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    logger.warning("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connections_to_close = list(websocket_hub.active_connections)
    for websocket in connections_to_close:
        try:
            await websocket.close(code=1001, reason="Server reset")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    websocket_hub.active_connections.clear()

    logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ {len(connections_to_close)} WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    return {
        "status": "success",
        "message": f"–°–±—Ä–æ—à–µ–Ω–æ {len(connections_to_close)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
        "stats": websocket_hub.get_connection_stats(),
    }


@app.post("/api/evolve")
async def start_evolution(data: dict):
    """–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ (mock)."""
    global POPULATION_SIZE

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
    new_size = data.get("population_size", 20)
    POPULATION_SIZE = new_size

    logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {data}")
    logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {POPULATION_SIZE}")

    return {
        "message": "–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (mock)",
        "status": "success",
        "mutation_rate": data.get("mutation_rate", 0.3),
        "population_size": POPULATION_SIZE,
    }


@app.get("/api/population/{brain_id}")
async def get_brain(brain_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞."""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–∑–≥–∞ #{brain_id}")

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º brain_id
    if brain_id <= 0 or brain_id > POPULATION_SIZE:
        return {"error": f"ID –º–æ–∑–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {POPULATION_SIZE}"}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–≤–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    node_count = 7 + (brain_id % 5)  # 7-11 —É–∑–ª–æ–≤ (–∫–∞–∫ –≤ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    connection_count = 8 + (brain_id % 7)  # 8-14 —Å–≤—è–∑–µ–π (–∫–∞–∫ –≤ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

    # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã
    nodes = []
    for i in range(1, node_count + 1):
        if i == 1:
            node_type = "input"
        elif i == node_count:
            node_type = "output"
        else:
            node_type = "hidden"

        nodes.append(
            {
                "id": i,
                "type": node_type,
                "activation": "sigmoid",
                "bias": round(0.1 + (i * 0.05), 2),
                "threshold": round(0.3 + (i * 0.1), 2),
            }
        )

    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ (—Å–æ–µ–¥–∏–Ω—è–µ–º —É–∑–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
    connections = []
    for i in range(1, connection_count + 1):
        if i < node_count:  # –°–≤—è–∑—å –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É–∑–ª–∞–º–∏
            connections.append(
                {
                    "id": i,
                    "from": i,
                    "to": i + 1,
                    "weight": round(-0.8 + (i * 0.3), 2),
                    "plasticity": 0.1,
                    "enabled": True,
                }
            )
        else:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–ª—É—á–∞–π–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
            from_node = (i % node_count) + 1
            to_node = ((i + 1) % node_count) + 1
            if from_node != to_node:
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∑–≥–∏ –∏–º–µ—é—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                # –ú–æ–∑–≥–∏ 3, 7, 11, 15, 19 –∏–º–µ—é—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏
                is_disabled = (
                    brain_id in [3, 7, 11, 15, 19] and i > connection_count - 2
                )
                connections.append(
                    {
                        "id": i,
                        "from": from_node,
                        "to": to_node,
                        "weight": round(-0.5 + (i * 0.2), 2),
                        "plasticity": 0.1,
                        "enabled": not is_disabled,
                    }
                )

    mock_brain = {
        "id": brain_id,
        "nodes": nodes,
        "connections": connections,
        "gp": 3.5 + (brain_id * 0.1),  # GP –æ—Ç 3.6 –¥–æ 5.5
        "fitness": 0.3 + (brain_id * 0.01),  # Fitness –æ—Ç 0.31 –¥–æ 0.5
        "age": 1 + (brain_id % 3),  # Age –æ—Ç 1 –¥–æ 3
    }

    logger.info(
        f"–£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–∑–≥–∞ #{brain_id}: "
        f"{len(nodes)} —É–∑–ª–æ–≤, {len(connections)} —Å–≤—è–∑–µ–π"
    )
    return mock_brain


@app.post("/api/test-redis")
async def test_redis_event():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ Redis."""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        await redis_adapter.connect()

        # –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        success = await redis_adapter.publish_event(
            "test_event",
            {
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ API",
                "timestamp": "2025-01-18T00:00:00Z",
                "data": {"test": True, "value": 42},
            },
        )

        if success:
            return {
                "status": "success",
                "message": "–°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Redis",
                "channel": "brainzzz.events",
            }
        else:
            return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞: {str(e)}"}


# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    client_id = id(websocket)
    logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket #{client_id}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        if len(websocket_hub.active_connections) >= websocket_hub.max_connections:
            logger.warning(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: "
                f"{websocket_hub.max_connections}"
            )
            await websocket.close(code=1013, reason="Too many connections")
            return

        await websocket_hub.connect(websocket)
        logger.info(f"‚úÖ WebSocket #{client_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if websocket not in websocket_hub.active_connections:
            logger.warning(
                f"‚ö†Ô∏è WebSocket #{client_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ping_task = asyncio.create_task(ping_websocket(websocket, client_id))

        try:
            while True:
                # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
                data = await websocket.receive_text()
                logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket #{client_id}: {data}")

        except WebSocketDisconnect:
            logger.info(f"üîå WebSocket #{client_id} –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket #{client_id}: {e}")
        finally:
            # –û—Ç–º–µ–Ω—è–µ–º ping –∑–∞–¥–∞—á—É
            ping_task.cancel()
            websocket_hub.disconnect(websocket)
            logger.info(f"üßπ WebSocket #{client_id} –æ—á–∏—â–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket #{client_id}: {e}")
        websocket_hub.disconnect(websocket)
        try:
            await websocket.close(code=1011, reason="Internal error")
        except Exception:
            pass


async def ping_websocket(websocket: WebSocket, client_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ ping —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    try:
        while True:
            await asyncio.sleep(30)  # Ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if websocket in websocket_hub.active_connections:
                try:
                    await websocket.send_text('{"type": "ping"}')
                    logger.debug(f"üèì Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω WebSocket #{client_id}")
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ping WebSocket #{client_id}: {e}"
                    )
                    break
            else:
                break
    except asyncio.CancelledError:
        logger.debug(f"üèì Ping –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è WebSocket #{client_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping WebSocket #{client_id}: {e}")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
