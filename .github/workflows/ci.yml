name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy

    - name: Run linting
      run: |
        flake8 brains/ evo/ tasks/ api/ --max-line-length=88 --extend-ignore=E203
        black --check brains/ evo/ tasks/ api/
        isort --check-only brains/ evo/ tasks/ api/
        mypy brains/ evo/ tasks/ api/

  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      run: |
        python -m pytest tests/ --cov=brains --cov=evo --cov=tasks --cov-report=xml

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/frontend/package-lock.json

    - name: Install dependencies
      working-directory: web/frontend
      run: npm ci

    - name: Run linting
      working-directory: web/frontend
      run: npm run lint

    - name: Run tests
      working-directory: web/frontend
      run: npm test

    - name: Build
      working-directory: web/frontend
      run: npm run build

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r brains/ evo/ tasks/ api/ -f json -o bandit-report.json
        safety scan --full-report --output json --save-as safety-report.json
