"""
–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –¥–ª—è –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤.
"""

import time
import numpy as np
from brains import Brain, Genome, Phenotype, GrowthRules
from tasks import TaskManager, XORTask, SequenceTask
from dist import ParallelEngine, RayManager


def test_parallel_evaluation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏."""
    print("üß† –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏...")

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
    task_manager = TaskManager()
    task_manager.add_task(XORTask())
    task_manager.add_task(SequenceTask())

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –º–æ–∑–≥–æ–≤
    population_size = 20
    population = []

    for i in range(population_size):
        genome = Genome(input_size=2, output_size=1, hidden_size=3)
        growth_rules = GrowthRules()
        brain = Brain(genome, growth_rules)
        brain.gp = np.random.random() * 10.0
        population.append(brain)

    print(f"   –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ø—É–ª—è—Ü–∏—è –∏–∑ {len(population)} –º–æ–∑–≥–æ–≤")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
    print("\nüìä –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞...")
    start_time = time.time()

    sequential_results = []
    for brain in population:
        task_results = task_manager.evaluate_brain(brain)
        fitness = brain.evaluate_fitness(task_results)
        sequential_results.append((brain, fitness))

    sequential_time = time.time() - start_time
    avg_fitness_seq = np.mean([r[1] for r in sequential_results])

    print(f"   –í—Ä–µ–º—è: {sequential_time:.3f}—Å")
    print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {avg_fitness_seq:.3f}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
    print("\nüöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞...")

    try:
        parallel_engine = ParallelEngine(num_workers=4, use_ray=True)

        start_time = time.time()
        parallel_results = parallel_engine.evaluate_population_parallel(
            population, task_manager
        )
        parallel_time = time.time() - start_time

        avg_fitness_par = np.mean([r[1] for r in parallel_results])

        print(f"   –í—Ä–µ–º—è: {parallel_time:.3f}—Å")
        print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {avg_fitness_par:.3f}")
        print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {sequential_time / parallel_time:.2f}x")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        fitness_diff = abs(avg_fitness_seq - avg_fitness_par)
        if fitness_diff < 0.01:
            print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        else:
            print(f"   ‚ö†Ô∏è –†–∞–∑–ª–∏—á–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {fitness_diff:.3f}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏
        stats = parallel_engine.get_population_statistics(population, task_manager)
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏:")
        print(f"   –†–∞–∑–º–µ—Ä: {stats['population_size']}")
        print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {stats['valid_evaluations']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {stats['avg_fitness']:.3f}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {stats['max_fitness']:.3f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: {stats['avg_nodes']:.1f}")
        print(f"   –û—à–∏–±–∫–∏: {stats['errors']}")

        parallel_engine.shutdown()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: {e}")
        print("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π...")


def test_ray_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ray –º–µ–Ω–µ–¥–∂–µ—Ä."""
    print("\nüîß –¢–µ—Å—Ç Ray –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        ray_manager = RayManager(num_cpus=4, local_mode=False)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        cluster_info = ray_manager.get_cluster_info()
        print(f"   –ö–ª–∞—Å—Ç–µ—Ä: {cluster_info.num_cpus} CPU, {cluster_info.num_gpus} GPU")
        print(f"   –ü–∞–º—è—Ç—å: {cluster_info.memory_total / 1024**3:.1f} GB")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–æ—Ä—ã: {cluster_info.active_actors}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization = ray_manager.optimize_cluster_config()
        print(f"   –û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimization['optimization_score']:.1f}/100")

        if optimization["recommendations"]:
            print("   üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for category, rec in optimization["recommendations"].items():
                print(f"      {category}: {rec['message']}")

        # –ö—Ä–∞—Ç–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("\n   üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ (5 —Å–µ–∫—É–Ω–¥)...")
        ray_manager.monitor_resources(interval=1.0, duration=5.0)

        ray_manager.shutdown()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Ray –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")


def test_parallel_evolution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —ç–≤–æ–ª—é—Ü–∏—é."""
    print("\nüîÑ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏...")

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        parallel_engine = ParallelEngine(num_workers=4, use_ray=True)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
        population_size = 10
        population = []

        for i in range(population_size):
            genome = Genome(input_size=2, output_size=1, hidden_size=2)
            growth_rules = GrowthRules()
            brain = Brain(genome, growth_rules)
            population.append(brain)

        print(f"   –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ø—É–ª—è—Ü–∏—è –∏–∑ {len(population)} –º–æ–∑–≥–æ–≤")

        # –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
        mutation_rate = 0.8  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏
        evolved_population = parallel_engine.evolve_population_parallel(
            population, mutation_rate
        )

        print(f"   –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(evolved_population)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∑–≥–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        original_nodes = [b.phenotype.num_nodes for b in population]
        evolved_nodes = [b.phenotype.num_nodes for b in evolved_population]

        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã: {original_nodes}")
        print(f"   –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–≤—à–∏–µ —É–∑–ª—ã: {evolved_nodes}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–∑–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if original_nodes != evolved_nodes:
            print("   ‚úÖ –≠–≤–æ–ª—é—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("   ‚ö†Ô∏è –ú–æ–∑–≥–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏)")

        parallel_engine.shutdown()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤")
    print("=" * 60)

    # –¢–µ—Å—Ç 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    test_parallel_evaluation()

    # –¢–µ—Å—Ç 2: Ray –º–µ–Ω–µ–¥–∂–µ—Ä
    test_ray_manager()

    # –¢–µ—Å—Ç 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
    test_parallel_evolution()

    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
