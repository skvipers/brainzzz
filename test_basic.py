#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤.
"""

import numpy as np

from brains import Brain, Genome, GrowthRules
from tasks import SequenceTask, TaskManager, XORTask


def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å."""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –º–æ–∑–≥–æ–≤...")

    # –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    genome = Genome(input_size=2, output_size=1, hidden_size=3)
    growth_rules = GrowthRules()
    brain = Brain(genome, growth_rules)

    print(f"   –°–æ–∑–¥–∞–Ω –º–æ–∑–≥: {brain}")
    print(f"   –£–∑–ª—ã: {brain.phenotype.num_nodes}")
    print(f"   –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {len(brain.genome.connection_genes)}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥–æ–≤
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–æ–≤...")
    test_inputs = [
        np.array([0.0, 0.0]),
        np.array([0.0, 1.0]),
        np.array([1.0, 0.0]),
        np.array([1.0, 1.0]),
    ]

    for i, input_data in enumerate(test_inputs):
        output = brain.process_input(input_data)
        print(f"   –í—Ö–æ–¥ {input_data} -> –í—ã—Ö–æ–¥ {output}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
    task_manager = TaskManager()
    task_manager.add_task(XORTask())
    task_manager.add_task(SequenceTask())

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–∑–≥
    task_results = task_manager.evaluate_brain(brain)
    fitness = brain.evaluate_fitness(task_results)

    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á: {task_results}")
    print(f"   –ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {fitness:.3f}")
    print(f"   GP: {brain.gp:.2f}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—Å—Ç
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞...")
    print(f"   –ú–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏: {brain.growth_rules._can_grow(brain)}")
    print(
        f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ä–æ—Å—Ç–∞: "
        f"{brain.growth_rules.get_available_growth_types(brain)}"
    )

    # –î–∞—ë–º GP –¥–ª—è —Ä–æ—Å—Ç–∞
    brain.gp = 20.0
    print(f"   –£–≤–µ–ª–∏—á–∏–ª–∏ GP –¥–æ: {brain.gp:.2f}")
    print(f"   –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏: {brain.growth_rules._can_grow(brain)}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º—É—Ç–∞—Ü–∏–∏
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É—Ç–∞—Ü–∏–π...")
    old_weights = [conn.weight for conn in brain.genome.connection_genes]
    brain.mutate(mutation_rate=0.3)
    new_weights = [conn.weight for conn in brain.genome.connection_genes]

    print(f"   –í–µ—Å–∞ –¥–æ –º—É—Ç–∞—Ü–∏–∏: {[f'{w:.3f}' for w in old_weights]}")
    print(f"   –í–µ—Å–∞ –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–∏: {[f'{w:.3f}' for w in new_weights]}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    brain_clone = brain.clone()
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {brain}")
    print(f"   –ö–ª–æ–Ω: {brain_clone}")
    print(f"   –ö–ª–æ–Ω –∏–º–µ–µ—Ç GP: {brain_clone.gp:.2f}")

    print("\n‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


def test_evolution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —ç–≤–æ–ª—é—Ü–∏—é."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —ç–≤–æ–ª—é—Ü–∏–∏...")

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ø—É–ª—è—Ü–∏—é
    population_size = 5
    brains = []
    growth_rules = GrowthRules()

    for i in range(population_size):
        genome = Genome(
            input_size=np.random.randint(2, 4),
            output_size=np.random.randint(1, 3),
            hidden_size=np.random.randint(2, 5),
        )
        brain = Brain(genome, growth_rules)
        brain.gp = np.random.uniform(5.0, 15.0)
        brains.append(brain)

    print(f"   –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ø—É–ª—è—Ü–∏—è –∏–∑ {len(brains)} –º–æ–∑–≥–æ–≤")

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
    task_manager = TaskManager()
    task_manager.add_task(XORTask())

    print("   –û—Ü–µ–Ω–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏...")
    for i, brain in enumerate(brains):
        task_results = task_manager.evaluate_brain(brain)
        fitness = brain.evaluate_fitness(task_results)
        print(f"     –ú–æ–∑–≥ {i+1}: fitness={fitness:.3f}, GP={brain.gp:.2f}")

    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–≥–æ
    best_brain = max(brains, key=lambda b: b.fitness)
    print(f"   –õ—É—á—à–∏–π –º–æ–∑–≥: fitness={best_brain.fitness:.3f}")

    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤–æ–ª—é—Ü–∏—è: –º—É—Ç–∏—Ä—É–µ–º —Ö—É–¥—à–∏—Ö
    print("   –ú—É—Ç–∞—Ü–∏—è —Ö—É–¥—à–∏—Ö –æ—Å–æ–±–µ–π...")
    brains.sort(key=lambda b: b.fitness)
    worst_brains = brains[:2]

    for brain in worst_brains:
        old_fitness = brain.fitness
        brain.mutate(mutation_rate=0.5)
        print(f"     –ú—É—Ç–∏—Ä–æ–≤–∞–ª –º–æ–∑–≥: {old_fitness:.3f} -> {brain.fitness:.3f}")

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    try:
        test_basic_functionality()
        test_evolution()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback

        traceback.print_exc()
